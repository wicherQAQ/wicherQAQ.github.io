<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TIME IN PIECE</title>
  
  <subtitle>I MUST ASSEMBL THEM</subtitle>
  <link href="https://wicherqaq.github.io/atom.xml" rel="self"/>
  
  <link href="https://wicherqaq.github.io/"/>
  <updated>2020-09-10T03:20:01.514Z</updated>
  <id>https://wicherqaq.github.io/</id>
  
  <author>
    <name>wicherQAQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu双网卡网络设置</title>
    <link href="https://wicherqaq.github.io/2020/09/10/ubuntu%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>https://wicherqaq.github.io/2020/09/10/ubuntu%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-09-10T03:17:13.000Z</published>
    <updated>2020-09-10T03:20:01.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="当前操作"><a href="#当前操作" class="headerlink" title="当前操作"></a>当前操作</h4><p>在<code>/etc/rc.local</code>启动文件中添加<code>route add</code>命令指定网段，网卡和网关信息</p><p>sudo route add -net 192.168.8.0/24 【内网网卡名】</p><p>sudo route add -net 192.168.8.0/24 gw 192.168.8.1 # 路由网关地址</p><p>sudo route add -net 192.168.10.0/24 【外网网卡名】</p><p>sudo route add -net 192.168.10.0/24 gw 192.168.10.1 # 路由网关地址</p><h5 id="route-n"><a href="#route-n" class="headerlink" title="route -n"></a>route -n</h5><p>查看路由表</p><h5 id="route-add"><a href="#route-add" class="headerlink" title="route add"></a>route add</h5><p><em>命令解释</em>：<code>route add</code>命令的主要作用是添加静态路由</p><h5 id="route-del"><a href="#route-del" class="headerlink" title="route del"></a>route del</h5><p><em>命令解释</em>：<code>route del</code>命令的主要作用是删除<code>route -n</code>列出的静态路由。（网段相同，掩码相同则从上到下一条条删除）</p><p><em>注意</em>：直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在/etc/rc.local中添加route命令来设置路由永久有效。</p><h4 id="目前遇到的问题"><a href="#目前遇到的问题" class="headerlink" title="目前遇到的问题"></a>目前遇到的问题</h4><ol><li><p>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 可以ping通</p><p>但是ping局域网内的其他机器会没有反应（怀疑是不是huawei路由器的问题-待验证）</p></li><li><p>指定相关<code>IP</code>到指定的网卡，使得访问只能走指定的网关（目前思路：可能需要修改<code>host</code>文件？通过<code>route add</code>命令设置到指定网关）</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;当前操作&quot;&gt;&lt;a href=&quot;#当前操作&quot; class=&quot;headerlink&quot; title=&quot;当前操作&quot;&gt;&lt;/a&gt;当前操作&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;/etc/rc.local&lt;/code&gt;启动文件中添加&lt;code&gt;route add&lt;/code&gt;命令指定网段</summary>
      
    
    
    
    <category term="Linux" scheme="https://wicherqaq.github.io/categories/Linux/"/>
    
    
    <category term="ubuntu" scheme="https://wicherqaq.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="https://wicherqaq.github.io/2020/09/10/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://wicherqaq.github.io/2020/09/10/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2020-09-10T02:51:47.000Z</published>
    <updated>2020-09-10T02:54:33.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>[TOC]</p><h2 id="1-原码、反码和补码"><a href="#1-原码、反码和补码" class="headerlink" title="1. 原码、反码和补码"></a>1. 原码、反码和补码</h2><p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p><p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 11 -&gt; 3</span><br><span class="line">10 00 00 11 -&gt; -3</span><br></pre></td></tr></table></figure><p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 11 -&gt; 3</span><br><span class="line">11 11 11 00 -&gt; -3</span><br></pre></td></tr></table></figure><p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 11 -&gt; 3</span><br><span class="line">11 11 11 01 -&gt; -3</span><br></pre></td></tr></table></figure><p><strong>符号位</strong>：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p><h2 id="2-按位运算"><a href="#2-按位运算" class="headerlink" title="2. 按位运算"></a>2. 按位运算</h2><ul><li>按位非操作 ~</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">~ <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>~</code> 把<code>num</code>的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 <code>~</code> 运算中同样会取反。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line">11 11 10 10 -&gt; -6</span><br><span class="line"></span><br><span class="line">11 11 10 11 -&gt; -5</span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line">00 00 01 00 -&gt; 4</span><br></pre></td></tr></table></figure><ul><li>按位与操作 &amp;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &amp; <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只有两个对应位都为 1 时才为 1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">&amp;</span><br><span class="line">00 00 01 10 -&gt; 6</span><br><span class="line">---</span><br><span class="line">00 00 01 00 -&gt; 4</span><br></pre></td></tr></table></figure><ul><li>按位或操作 |</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> | <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> | <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只要两个对应位中有一个 1 时就为 1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">|</span><br><span class="line">00 00 01 10 -&gt; 6</span><br><span class="line">---</span><br><span class="line">00 00 01 11 -&gt; 7</span><br></pre></td></tr></table></figure><ul><li>按位异或操作 ^</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只有两个对应位不同时才为 1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">^</span><br><span class="line">00 00 01 10 -&gt; 6</span><br><span class="line">---</span><br><span class="line">00 00 00 11 -&gt; 3</span><br></pre></td></tr></table></figure><p>异或操作的性质：满足交换律和结合律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line">B: <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^B: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">B^A: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^A: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">A^<span class="number">0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">A^B^A: = A^A^B = B = <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><ul><li>按位左移操作 &lt;&lt;</li></ul><p><code>num &lt;&lt; i</code> 将<code>num</code>的二进制表示向左移动<code>i</code>位所得的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00 00 10 11 -&gt; 11</span><br><span class="line"><span class="number">11</span> &lt;&lt; <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">01 01 10 00 -&gt; 88</span><br></pre></td></tr></table></figure><ul><li>按位右移操作 &gt;&gt;</li></ul><p><code>num &gt;&gt; i</code> 将<code>num</code>的二进制表示向右移动<code>i</code>位所得的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00 00 10 11 -&gt; 11</span><br><span class="line"><span class="number">11</span> &gt;&gt; <span class="number">2</span></span><br><span class="line">---</span><br><span class="line">00 00 00 10 -&gt; 2</span><br></pre></td></tr></table></figure><h2 id="3-利用位运算实现快速计算"><a href="#3-利用位运算实现快速计算" class="headerlink" title="3. 利用位运算实现快速计算"></a>3. 利用位运算实现快速计算</h2><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; 1 -&gt; 计算 n*2</span><br><span class="line">n &gt;&gt; 1 -&gt; 计算 n/2，负奇数的运算不可用</span><br><span class="line">n &lt;&lt; m -&gt; 计算 n*(2^m)，即乘以 2 的 m 次方</span><br><span class="line">n &gt;&gt; m -&gt; 计算 n/(2^m)，即除以 2 的 m 次方</span><br><span class="line">1 &lt;&lt; n -&gt; 2^n</span><br></pre></td></tr></table></figure><p>通过 <code>^</code> 快速交换两个整数。 通过 <code>^</code> 快速交换两个整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br></pre></td></tr></table></figure><p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">&amp;</span><br><span class="line">11 11 10 11 -&gt; -5</span><br><span class="line">---</span><br><span class="line">00 00 00 01 -&gt; 1</span><br><span class="line"></span><br><span class="line">00 00 11 10 -&gt; 14</span><br><span class="line">&amp;</span><br><span class="line">11 11 00 10 -&gt; -14</span><br><span class="line">---</span><br><span class="line">00 00 00 10 -&gt; 2</span><br></pre></td></tr></table></figure><h2 id="4-利用位运算实现整数集合"><a href="#4-利用位运算实现整数集合" class="headerlink" title="4. 利用位运算实现整数集合"></a>4. 利用位运算实现整数集合</h2><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p><p>比如集合 <code>{1, 3, 4, 8}</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p><p>元素与集合的操作：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a | (1&lt;&lt;i)  -&gt; 把 i 插入到集合中</span><br><span class="line">a &amp; ~(1&lt;&lt;i) -&gt; 把 i 从集合中删除</span><br><span class="line">a &amp; (1&lt;&lt;i)  -&gt; 判断 i 是否属于该集合（零不属于，非零属于）</span><br></pre></td></tr></table></figure><p>集合之间的操作：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a 补   -&gt; ~a</span><br><span class="line">a 交 b -&gt; a &amp; b</span><br><span class="line">a 并 b -&gt; a | b</span><br><span class="line">a 差 b -&gt; a &amp; (~b)</span><br></pre></td></tr></table></figure><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p><p>【例子】C#语言输出负数。</p><p>[ ]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        string s1 &#x3D; Convert.ToString(-3, 2);</span><br><span class="line">        Console.WriteLine(s1); </span><br><span class="line">        &#x2F;&#x2F; 11111111111111111111111111111101</span><br><span class="line">        </span><br><span class="line">        string s2 &#x3D; Convert.ToString(-3, 16);</span><br><span class="line">        Console.WriteLine(s2); </span><br><span class="line">        &#x2F;&#x2F; fffffffd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【例子】 Python 的<code>bin()</code> 输出。</p><p>[37]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(bin(3))  # 0b11</span><br><span class="line">print(bin(-3))  # -0b11</span><br><span class="line"></span><br><span class="line">print(bin(-3 &amp; 0xffffffff))  </span><br><span class="line"># 0b11111111111111111111111111111101</span><br><span class="line"></span><br><span class="line">print(bin(0xfffffffd))       </span><br><span class="line"># 0b11111111111111111111111111111101</span><br><span class="line"></span><br><span class="line">print(0xfffffffd)  # 4294967293</span><br><span class="line">0b11</span><br><span class="line">-0b11</span><br><span class="line">0b11111111111111111111111111111101</span><br><span class="line">0b11111111111111111111111111111101</span><br><span class="line">4294967293</span><br></pre></td></tr></table></figure><p>是不是很颠覆认知，我们从结果可以看出：</p><ul><li>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</li><li>Python中的整型是补码形式存储的。</li><li>Python中整型是不限制长度的不会超范围溢出。</li></ul><p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数<code>0xffffffff</code>进行按位与操作，再交给<code>bin()</code>进行输出，得到的才是负数的补码表示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位运算&quot;&gt;&lt;a href=&quot;#位运算&quot; class=&quot;headerlink&quot; title=&quot;位运算&quot;&gt;&lt;/a&gt;位运算&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-原码、反码和补码&quot;&gt;&lt;a href=&quot;#1-原码、反码和补码&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://wicherqaq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>python入门（中）</title>
    <link href="https://wicherqaq.github.io/2020/09/10/python%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>https://wicherqaq.github.io/2020/09/10/python%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%EF%BC%89/</id>
    <published>2020-09-10T02:51:26.000Z</published>
    <updated>2020-09-10T02:56:57.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门-中"><a href="#Python入门-中" class="headerlink" title="Python入门(中)"></a>Python入门(中)</h1><p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p><p><strong>本实验包括以下内容</strong>：</p><ol><li>列表<ul><li>列表的定义</li><li>列表的创建</li><li>向列表中添加元素</li><li>删除列表中的元素</li><li>获取列表中的元素</li><li>列表的常用操作符</li><li>列表的其他方法</li></ul></li><li>元组<ul><li>创建和访问一个元组</li><li>更新和删除一个元组</li><li>元组相关的操作符</li><li>内置方法</li><li>解压元组</li></ul></li><li>字符串<ul><li>字符串的定义</li><li>字符串的切片与拼接</li><li>字符串的常用内置方法</li><li>字符串格式化</li></ul></li><li>字典<ul><li>可变类型与不可变类型</li><li>字典的定义</li><li>创建和访问字典</li><li>字典的内置方法</li></ul></li><li>集合<ul><li>集合的创建</li><li>访问集合中的值</li><li>集合的内置方法</li><li>集合的转换</li><li>不可变集合</li></ul></li><li>序列<ul><li>针对序列的内置函数</li></ul></li></ol><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>简单数据类型</p><ul><li>整型<code>&lt;class &#39;int&#39;&gt;</code></li><li>浮点型<code>&lt;class &#39;float&#39;&gt;</code></li><li>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></li></ul><p>容器数据类型</p><ul><li>列表<code>&lt;class &#39;list&#39;&gt;</code></li><li>元组<code>&lt;class &#39;tuple&#39;&gt;</code></li><li>字典<code>&lt;class &#39;dict&#39;&gt;</code></li><li>集合<code>&lt;class &#39;set&#39;&gt;</code></li><li>字符串<code>&lt;class &#39;str&#39;&gt;</code></li></ul><h2 id="1-列表的定义"><a href="#1-列表的定义" class="headerlink" title="1. 列表的定义"></a>1. 列表的定义</h2><p>列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 <code>[元素1, 元素2, ..., 元素n]</code>。</p><ul><li>关键点是「中括号 []」和「逗号 ,」</li><li>中括号 把所有元素绑在一起</li><li>逗号 将每个元素一一分开</li></ul><h2 id="2-列表的创建"><a href="#2-列表的创建" class="headerlink" title="2. 列表的创建"></a>2. 列表的创建</h2><ul><li>创建一个普通列表</li></ul><p>【例子】</p><p>[1]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [2, 3, 4, 5, 6, 7]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [2, 3, 4, 5, 6, 7] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;</span><br><span class="line">hello</span><br><span class="line">[2, 3, 4, 5, 6, 7] &lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><ul><li>利用<code>range()</code>创建列表</li></ul><p>【例子】</p><p>[2]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; list(range(10))</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; list(range(1, 11, 2))</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; list(range(10, 1, -2))</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><ul><li>利用推导式创建列表</li></ul><p>【例子】</p><p>[3]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [0] * 5</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [0 for i in range(5)]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [i for i in range(10)]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [i for i in range(1, 10, 2)]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [i for i in range(10, 1, -2)]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [i ** 2 for i in range(1, 10)]</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x &#x3D; [i for i in range(100) if (i % 2) !&#x3D; 0 and (i % 3) &#x3D;&#x3D; 0]</span><br><span class="line">print(x, type(x))</span><br><span class="line"></span><br><span class="line"># [3, 9, 15, 21, 27, 33, 39,</span><br><span class="line">[0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的<code>[1,2,3]</code>，也有3个指针和3个整数对象。</p><p><code>x = [a] * 4</code>操作中，只是创建4个指向list的引用，所以一旦<code>a</code>改变，<code>x</code>中4个<code>a</code>也会随之改变。</p><p>【例子】</p><p>[4]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [[0] * 3] * 4</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x[0][0] &#x3D; 1</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">a &#x3D; [0] * 3</span><br><span class="line">x &#x3D; [a] * 4</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line"></span><br><span class="line">x[0][0] &#x3D; 1</span><br><span class="line">print(x, type(x))</span><br><span class="line"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><ul><li>创建一个混合列表</li></ul><p>【例子】</p><p>[5]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mix &#x3D; [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]]</span><br><span class="line">print(mix, type(mix))  </span><br><span class="line"># [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><ul><li>创建一个空列表</li></ul><p>【例子】</p><p>[6]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">empty &#x3D; []</span><br><span class="line">print(empty, type(empty))  # [] &lt;class &#39;list&#39;&gt;</span><br><span class="line">[] &lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure><p>列表不像元组，列表内容可更改 (mutable)，因此附加 (<code>append</code>, <code>extend</code>)、插入 (<code>insert</code>)、删除 (<code>remove</code>, <code>pop</code>) 这些操作都可以用在它身上。</p><h2 id="3-向列表中添加元素"><a href="#3-向列表中添加元素" class="headerlink" title="3. 向列表中添加元素"></a>3. 向列表中添加元素</h2><ul><li><code>list.append(obj)</code> 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。</li></ul><p>【例子】</p><p>[7]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">x.append(&#39;Thursday&#39;)</span><br><span class="line">print(x)  </span><br><span class="line"># [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]</span><br><span class="line"></span><br><span class="line">print(len(x))  # 6</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意<code>append()</code>和<code>extend()</code>的区别。</p><p>【例子】</p><p>[8]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">x.append([&#39;Thursday&#39;, &#39;Sunday&#39;])</span><br><span class="line">print(x)  </span><br><span class="line"># [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]</span><br><span class="line"></span><br><span class="line">print(len(x))  # 6</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]</span><br><span class="line">6</span><br></pre></td></tr></table></figure><ul><li><code>list.extend(seq)</code> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li></ul><p>【例子】</p><p>[9]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">x.extend([&#39;Thursday&#39;, &#39;Sunday&#39;])</span><br><span class="line">print(x)  </span><br><span class="line"># [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]</span><br><span class="line"></span><br><span class="line">print(len(x))  # 7</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>严格来说 <code>append</code> 是追加，把一个东西整体添加在列表后，而 <code>extend</code> 是扩展，把一个东西里的所有元素添加在列表后。</p><ul><li><code>list.insert(index, obj)</code> 在编号 <code>index</code> 位置插入 <code>obj</code>。</li></ul><p>【例子】</p><p>[10]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">x.insert(2, &#39;Sunday&#39;)</span><br><span class="line">print(x)</span><br><span class="line"># [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line"></span><br><span class="line">print(len(x))  # 6</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="4-删除列表中的元素"><a href="#4-删除列表中的元素" class="headerlink" title="4. 删除列表中的元素"></a>4. 删除列表中的元素</h2><ul><li><code>list.remove(obj)</code> 移除列表中某个值的第一个匹配项</li></ul><p>【例子】</p><p>[11]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">x.remove(&#39;Monday&#39;)</span><br><span class="line">print(x)  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">[&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br></pre></td></tr></table></figure><ul><li><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li></ul><p>【例子】</p><p>[12]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">y &#x3D; x.pop()</span><br><span class="line">print(y)  # Friday</span><br><span class="line"></span><br><span class="line">y &#x3D; x.pop(0)</span><br><span class="line">print(y)  # Monday</span><br><span class="line"></span><br><span class="line">y &#x3D; x.pop(-2)</span><br><span class="line">print(y)  # Wednesday</span><br><span class="line">print(x)  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]</span><br><span class="line">Friday</span><br><span class="line">Monday</span><br><span class="line">Wednesday</span><br><span class="line">[&#39;Tuesday&#39;, &#39;Thursday&#39;]</span><br></pre></td></tr></table></figure><p><code>remove</code> 和 <code>pop</code> 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。</p><ul><li><code>del var1[, var2 ……]</code> 删除单个或多个对象。</li></ul><p>【例子】</p><p>如果知道要删除的元素在列表中的位置，可使用<code>del</code>语句。</p><p>[13]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">del x[0:2]</span><br><span class="line">print(x)  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br></pre></td></tr></table></figure><p>如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用<code>del</code>语句；如果你要在删除元素后还能继续使用它，就使用方法<code>pop()</code>。</p><h2 id="5-获取列表中的元素"><a href="#5-获取列表中的元素" class="headerlink" title="5. 获取列表中的元素"></a>5. 获取列表中的元素</h2><ul><li>通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li><li>通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li></ul><p>【例子】</p><p>[14]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, [&#39;Thursday&#39;, &#39;Friday&#39;]]</span><br><span class="line">print(x[0], type(x[0]))  # Monday &lt;class &#39;str&#39;&gt;</span><br><span class="line">print(x[-1], type(x[-1]))  # [&#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;</span><br><span class="line">print(x[-2], type(x[-2]))  # Wednesday &lt;class &#39;str&#39;&gt;</span><br><span class="line">Monday &lt;class &#39;str&#39;&gt;</span><br><span class="line">[&#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;</span><br><span class="line">Wednesday &lt;class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><p>切片的通用写法是 <code>start : stop : step</code></p><ul><li>情况 1 - “start :”</li><li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往列表尾部切片。</li></ul><p>【例子】</p><p>[15]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(x[3:])  # [&#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(x[-3:])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">[&#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br></pre></td></tr></table></figure><ul><li>情况 2 - “: stop”</li><li>以 <code>step</code> 为 1 (默认) 从列表头部往编号 <code>stop</code> 切片。</li></ul><p>【例子】</p><p>[16]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">week &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(week[:3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]</span><br><span class="line">print(week[:-3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;]</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;]</span><br></pre></td></tr></table></figure><ul><li>情况 3 - “start : stop”</li><li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往编号 <code>stop</code> 切片。</li></ul><p>【例子】</p><p>[17]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">week &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(week[1:3])  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;]</span><br><span class="line">print(week[-3:-1])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;]</span><br><span class="line">[&#39;Tuesday&#39;, &#39;Wednesday&#39;]</span><br><span class="line">[&#39;Wednesday&#39;, &#39;Thursday&#39;]</span><br></pre></td></tr></table></figure><ul><li>情况 4 - “start : stop : step”</li><li>以具体的 <code>step</code> 从编号 <code>start</code> 往编号 <code>stop</code> 切片。注意最后把 <code>step</code> 设为 -1，相当于将列表反向排列。</li></ul><p>【例子】</p><p>[18]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">week &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(week[1:4:2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]</span><br><span class="line">print(week[:4:2])  # [&#39;Monday&#39;, &#39;Wednesday&#39;]</span><br><span class="line">print(week[1::2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]</span><br><span class="line">print(week[::-1])  </span><br><span class="line"># [&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]</span><br><span class="line">[&#39;Tuesday&#39;, &#39;Thursday&#39;]</span><br><span class="line">[&#39;Monday&#39;, &#39;Wednesday&#39;]</span><br><span class="line">[&#39;Tuesday&#39;, &#39;Thursday&#39;]</span><br><span class="line">[&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]</span><br></pre></td></tr></table></figure><ul><li>情况 5 - “ : “</li><li>复制列表中的所有元素（浅拷贝）。</li></ul><p>【例子】</p><p>[19]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eek &#x3D; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">print(week[:])  </span><br><span class="line"># [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br><span class="line">[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</span><br></pre></td></tr></table></figure><p>【例子】浅拷贝与深拷贝</p><p>[20]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">list1 &#x3D; [123, 456, 789, 213]</span><br><span class="line">list2 &#x3D; list1</span><br><span class="line">list3 &#x3D; list1[:]</span><br><span class="line"></span><br><span class="line">print(list2)  # [123, 456, 789, 213]</span><br><span class="line">print(list3)  # [123, 456, 789, 213]</span><br><span class="line">list1.sort()</span><br><span class="line">print(list2)  # [123, 213, 456, 789] </span><br><span class="line">print(list3)  # [123, 456, 789, 213]</span><br><span class="line"></span><br><span class="line">list1 &#x3D; [[123, 456], [789, 213]]</span><br><span class="line">list2 &#x3D; list1</span><br><span class="line">list3 &#x3D; list1[:]</span><br><span class="line">print(list2)  # [[123, 456], [789, 213]]</span><br><span class="line">print(list3)  # [[123, 456], [789, 213]]</span><br><span class="line">list1[0][0] &#x3D; 111</span><br><span class="line">print(list2)  # [[111, 456], [789, 213]]</span><br><span class="line">print(list3)  # [[111, 456], [789, 213]]</span><br><span class="line">[123, 456, 789, 213]</span><br><span class="line">[123, 456, 789, 213]</span><br><span class="line">[123, 213, 456, 789]</span><br><span class="line">[123, 456, 789, 213]</span><br><span class="line">[[123, 456], [789, 213]]</span><br><span class="line">[[123, 456], [789, 213]]</span><br><span class="line">[[111, 456], [789, 213]]</span><br><span class="line">[[111, 456], [789, 213]]</span><br></pre></td></tr></table></figure><h2 id="6-列表的常用操作符"><a href="#6-列表的常用操作符" class="headerlink" title="6. 列表的常用操作符"></a>6. 列表的常用操作符</h2><ul><li>等号操作符：<code>==</code></li><li>连接操作符 <code>+</code></li><li>重复操作符 <code>*</code></li><li>成员关系操作符 <code>in</code>、<code>not in</code></li></ul><p>「等号 ==」，只有成员、成员位置都相同时才返回True。</p><p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p><p>【例子】</p><p>[21]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">list1 &#x3D; [123, 456]</span><br><span class="line">list2 &#x3D; [456, 123]</span><br><span class="line">list3 &#x3D; [123, 456]</span><br><span class="line"></span><br><span class="line">print(list1 &#x3D;&#x3D; list2)  # False</span><br><span class="line">print(list1 &#x3D;&#x3D; list3)  # True</span><br><span class="line"></span><br><span class="line">list4 &#x3D; list1 + list2  # extend()</span><br><span class="line">print(list4)  # [123, 456, 456, 123]</span><br><span class="line"></span><br><span class="line">list5 &#x3D; list3 * 3</span><br><span class="line">print(list5)  # [123, 456, 123, 456, 123, 456]</span><br><span class="line"></span><br><span class="line">list3 *&#x3D; 3</span><br><span class="line">print(list3)  # [123, 456, 123, 456, 123, 456]</span><br><span class="line"></span><br><span class="line">print(123 in list3)  # True</span><br><span class="line">print(456 not in list3)  # False</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">[123, 456, 456, 123]</span><br><span class="line">[123, 456, 123, 456, 123, 456]</span><br><span class="line">[123, 456, 123, 456, 123, 456]</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>前面三种方法（<code>append</code>, <code>extend</code>, <code>insert</code>）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 而将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。</p><h2 id="7-列表的其它方法"><a href="#7-列表的其它方法" class="headerlink" title="7. 列表的其它方法"></a>7. 列表的其它方法</h2><p><code>list.count(obj)</code> 统计某个元素在列表中出现的次数</p><p>【例子】</p><p>[22]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 &#x3D; [123, 456] * 3</span><br><span class="line">print(list1)  # [123, 456, 123, 456, 123, 456]</span><br><span class="line">num &#x3D; list1.count(123)</span><br><span class="line">print(num)  # 3</span><br><span class="line">[123, 456, 123, 456, 123, 456]</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><code>list.index(x[, start[, end]])</code> 从列表中找出某个值第一个匹配项的索引位置</p><p>【例子】</p><p>[23]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 &#x3D; [123, 456] * 5</span><br><span class="line">print(list1.index(123))  # 0</span><br><span class="line">print(list1.index(123, 1))  # 2</span><br><span class="line">print(list1.index(123, 3, 7))  # 4</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p><code>list.reverse()</code> 反向列表中元素</p><p>【例子】</p><p>[24]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [123, 456, 789]</span><br><span class="line">x.reverse()</span><br><span class="line">print(x)  # [789, 456, 123]</span><br><span class="line">[789, 456, 123]</span><br></pre></td></tr></table></figure><p><code>list.sort(key=None, reverse=False)</code> 对原列表进行排序。</p><ul><li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</li><li>该方法没有返回值，但是会对列表的对象进行排序。</li></ul><p>【例子】</p><p>[25]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [123, 456, 789, 213]</span><br><span class="line">x.sort()</span><br><span class="line">print(x)</span><br><span class="line"># [123, 213, 456, 789]</span><br><span class="line"></span><br><span class="line">x.sort(reverse&#x3D;True)</span><br><span class="line">print(x)</span><br><span class="line"># [789, 456, 213, 123]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取列表的第二个元素</span><br><span class="line">def takeSecond(elem):</span><br><span class="line">    return elem[1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x &#x3D; [(2, 2), (3, 4), (4, 1), (1, 3)]</span><br><span class="line">x.sort(key&#x3D;takeSecond)</span><br><span class="line">print(x)</span><br><span class="line"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span><br><span class="line"></span><br><span class="line">x.sort(key&#x3D;lambda a: a[0])</span><br><span class="line">print(x)</span><br><span class="line"># [(1, 3), (2, 2), (3, 4), (4, 1)]</span><br><span class="line">[123, 213, 456, 789]</span><br><span class="line">[789, 456, 213, 123]</span><br><span class="line">[(4, 1), (2, 2), (1, 3), (3, 4)]</span><br><span class="line">[(1, 3), (2, 2), (3, 4), (4, 1)]</span><br></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>「元组」定义语法为：<code>(元素1, 元素2, ..., 元素n)</code></p><ul><li>小括号把所有元素绑在一起</li><li>逗号将每个元素一一分开</li></ul><h2 id="1-创建和访问一个元组"><a href="#1-创建和访问一个元组" class="headerlink" title="1. 创建和访问一个元组"></a>1. 创建和访问一个元组</h2><ul><li>Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。</li><li>元组使用小括号，列表使用方括号。</li><li>元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。</li></ul><p>【例子】</p><p>[26]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">t1 &#x3D; (1, 10.31, &#39;python&#39;)</span><br><span class="line">t2 &#x3D; 1, 10.31, &#39;python&#39;</span><br><span class="line">print(t1, type(t1))</span><br><span class="line"># (1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;</span><br><span class="line"></span><br><span class="line">print(t2, type(t2))</span><br><span class="line"># (1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;</span><br><span class="line"></span><br><span class="line">tuple1 &#x3D; (1, 2, 3, 4, 5, 6, 7, 8)</span><br><span class="line">print(tuple1[1])  # 2</span><br><span class="line">print(tuple1[5:])  # (6, 7, 8)</span><br><span class="line">print(tuple1[:5])  # (1, 2, 3, 4, 5)</span><br><span class="line">tuple2 &#x3D; tuple1[:]</span><br><span class="line">print(tuple2)  # (1, 2, 3, 4, 5, 6, 7, 8)</span><br><span class="line">(1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;</span><br><span class="line">(1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;</span><br><span class="line">2</span><br><span class="line">(6, 7, 8)</span><br><span class="line">(1, 2, 3, 4, 5)</span><br><span class="line">(1, 2, 3, 4, 5, 6, 7, 8)</span><br></pre></td></tr></table></figure><ul><li>创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li><li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</li></ul><p>【例子】</p><p>[27]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; (1)</span><br><span class="line">print(type(x))  # &lt;class &#39;int&#39;&gt;</span><br><span class="line">x &#x3D; 2, 3, 4, 5</span><br><span class="line">print(type(x))  # &lt;class &#39;tuple&#39;&gt;</span><br><span class="line">x &#x3D; []</span><br><span class="line">print(type(x))  # &lt;class &#39;list&#39;&gt;</span><br><span class="line">x &#x3D; ()</span><br><span class="line">print(type(x))  # &lt;class &#39;tuple&#39;&gt;</span><br><span class="line">x &#x3D; (1,)</span><br><span class="line">print(type(x))  # &lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[28]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(8 * (8))  # 64</span><br><span class="line">print(8 * (8,))  # (8, 8, 8, 8, 8, 8, 8, 8)</span><br><span class="line">64</span><br><span class="line">(8, 8, 8, 8, 8, 8, 8, 8)</span><br></pre></td></tr></table></figure><p>【例子】创建二维元组。</p><p>[29]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; (1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11)</span><br><span class="line">print(x)</span><br><span class="line"># ((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))</span><br><span class="line"></span><br><span class="line">print(x[0])</span><br><span class="line"># (1, 10.31, &#39;python&#39;)</span><br><span class="line">print(x[0][0], x[0][1], x[0][2])</span><br><span class="line"># 1 10.31 python</span><br><span class="line"></span><br><span class="line">print(x[0][0:2])</span><br><span class="line"># (1, 10.31)</span><br><span class="line">((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))</span><br><span class="line">(1, 10.31, &#39;python&#39;)</span><br><span class="line">1 10.31 python</span><br><span class="line">(1, 10.31)</span><br></pre></td></tr></table></figure><h2 id="2-更新和删除一个元组"><a href="#2-更新和删除一个元组" class="headerlink" title="2. 更新和删除一个元组"></a>2. 更新和删除一个元组</h2><p>【例子】</p><p>[30]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">week &#x3D; (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)</span><br><span class="line">week &#x3D; week[:2] + (&#39;Wednesday&#39;,) + week[2:]</span><br><span class="line">print(week)  # (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)</span><br><span class="line">(&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)</span><br></pre></td></tr></table></figure><p>【例子】元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p><p>[31]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t1 &#x3D; (1, 2, 3, [4, 5, 6])</span><br><span class="line">print(t1)  # (1, 2, 3, [4, 5, 6])</span><br><span class="line"></span><br><span class="line">t1[3][0] &#x3D; 9</span><br><span class="line">print(t1)  # (1, 2, 3, [9, 5, 6])</span><br><span class="line">(1, 2, 3, [4, 5, 6])</span><br><span class="line">(1, 2, 3, [9, 5, 6])</span><br></pre></td></tr></table></figure><h2 id="3-元组相关的操作符"><a href="#3-元组相关的操作符" class="headerlink" title="3. 元组相关的操作符"></a>3. 元组相关的操作符</h2><ul><li>等号操作符：<code>==</code></li><li>连接操作符 <code>+</code></li><li>重复操作符 <code>*</code></li><li>成员关系操作符 <code>in</code>、<code>not in</code></li></ul><p>「等号 ==」，只有成员、成员位置都相同时才返回True。</p><p>元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p><p>【例子】</p><p>[32]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">t1 &#x3D; (123, 456)</span><br><span class="line">t2 &#x3D; (456, 123)</span><br><span class="line">t3 &#x3D; (123, 456)</span><br><span class="line"></span><br><span class="line">print(t1 &#x3D;&#x3D; t2)  # False</span><br><span class="line">print(t1 &#x3D;&#x3D; t3)  # True</span><br><span class="line"></span><br><span class="line">t4 &#x3D; t1 + t2</span><br><span class="line">print(t4)  # (123, 456, 456, 123)</span><br><span class="line"></span><br><span class="line">t5 &#x3D; t3 * 3</span><br><span class="line">print(t5)  # (123, 456, 123, 456, 123, 456)</span><br><span class="line"></span><br><span class="line">t3 *&#x3D; 3</span><br><span class="line">print(t3)  # (123, 456, 123, 456, 123, 456)</span><br><span class="line"></span><br><span class="line">print(123 in t3)  # True</span><br><span class="line">print(456 not in t3)  # False</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">(123, 456, 456, 123)</span><br><span class="line">(123, 456, 123, 456, 123, 456)</span><br><span class="line">(123, 456, 123, 456, 123, 456)</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h2 id="4-内置方法"><a href="#4-内置方法" class="headerlink" title="4. 内置方法"></a>4. 内置方法</h2><p>元组大小和内容都不可更改，因此只有 <code>count</code> 和 <code>index</code> 两种方法。</p><p>【例子】</p><p>[33]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; (1, 10.31, &#39;python&#39;)</span><br><span class="line">print(t.count(&#39;python&#39;))  # 1</span><br><span class="line">print(t.index(10.31))  # 1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li><code>count(&#39;python&#39;)</code> 是记录在元组 <code>t</code> 中该元素出现几次，显然是 1 次</li><li><code>index(10.31)</code> 是找到该元素在元组 <code>t</code> 的索引，显然是 1</li></ul><h2 id="5-解压元组"><a href="#5-解压元组" class="headerlink" title="5. 解压元组"></a>5. 解压元组</h2><p>【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p><p>[34]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; (1, 10.31, &#39;python&#39;)</span><br><span class="line">(a, b, c) &#x3D; t</span><br><span class="line">print(a, b, c)</span><br><span class="line"># 1 10.31 python</span><br><span class="line">1 10.31 python</span><br></pre></td></tr></table></figure><p>【例子】解压二维元组（按照元组里的元组结构来定义变量）</p><p>[35]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; (1, 10.31, (&#39;OK&#39;, &#39;python&#39;))</span><br><span class="line">(a, b, (c, d)) &#x3D; t</span><br><span class="line">print(a, b, c, d)</span><br><span class="line"># 1 10.31 OK python</span><br><span class="line">1 10.31 OK python</span><br></pre></td></tr></table></figure><p>【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 <code>rest</code> 变量。</p><p>[36]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; 1, 2, 3, 4, 5</span><br><span class="line">a, b, *rest, c &#x3D; t</span><br><span class="line">print(a, b, c)  # 1 2 5</span><br><span class="line">print(rest)  # [3, 4]</span><br><span class="line">1 2 5</span><br><span class="line">[3, 4]</span><br></pre></td></tr></table></figure><p>【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。</p><p>[37]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; 1, 2, 3, 4, 5</span><br><span class="line">a, b, *_ &#x3D; t</span><br><span class="line">print(a, b)  # 1 2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1-字符串的定义"><a href="#1-字符串的定义" class="headerlink" title="1. 字符串的定义"></a>1. 字符串的定义</h2><ul><li>Python 中字符串被定义为引号之间的字符集合。</li><li>Python 支持使用成对的 单引号 或 双引号。</li></ul><p>【例子】</p><p>[38]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">t1 &#x3D; &#39;i love Python!&#39;</span><br><span class="line">print(t1, type(t1))</span><br><span class="line"># i love Python! &lt;class &#39;str&#39;&gt;</span><br><span class="line"></span><br><span class="line">t2 &#x3D; &quot;I love Python!&quot;</span><br><span class="line">print(t2, type(t2))</span><br><span class="line"># I love Python! &lt;class &#39;str&#39;&gt;</span><br><span class="line"></span><br><span class="line">print(5 + 8)  # 13</span><br><span class="line">print(&#39;5&#39; + &#39;8&#39;)  # 58</span><br><span class="line">i love Python! &lt;class &#39;str&#39;&gt;</span><br><span class="line">I love Python! &lt;class &#39;str&#39;&gt;</span><br><span class="line">13</span><br><span class="line">58</span><br></pre></td></tr></table></figure><ul><li>Python 的常用转义字符</li></ul><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\\</code></td><td>反斜杠符号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\t</code></td><td>横向制表符(TAB)</td></tr><tr><td><code>\r</code></td><td>回车</td></tr></tbody></table><p>【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号<code>\</code>对字符串中的符号进行转义。</p><p>[39]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;let\&#39;s go&#39;)  # let&#39;s go</span><br><span class="line">print(&quot;let&#39;s go&quot;)  # let&#39;s go</span><br><span class="line">print(&#39;C:\\now&#39;)  # C:\now</span><br><span class="line">print(&quot;C:\\Program Files\\Intel\\Wifi\\Help&quot;)</span><br><span class="line"># C:\Program Files\Intel\Wifi\Help</span><br><span class="line">let&#39;s go</span><br><span class="line">let&#39;s go</span><br><span class="line">C:\now</span><br><span class="line">C:\Program Files\Intel\Wifi\Help</span><br></pre></td></tr></table></figure><p>【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。</p><p>[40]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(r&#39;C:\Program Files\Intel\Wifi\Help&#39;)  </span><br><span class="line"># C:\Program Files\Intel\Wifi\Help</span><br><span class="line">C:\Program Files\Intel\Wifi\Help</span><br></pre></td></tr></table></figure><p>【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><p>[41]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">para_str &#x3D; &quot;&quot;&quot;这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB ( \t )。</span><br><span class="line">也可以使用换行符 [ \n ]。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(para_str)</span><br><span class="line"># 这是一个多行字符串的实例</span><br><span class="line"># 多行字符串可以使用制表符</span><br><span class="line"># TAB (    )。</span><br><span class="line"># 也可以使用换行符 [</span><br><span class="line">#  ]。</span><br><span class="line"></span><br><span class="line">para_str &#x3D; &#39;&#39;&#39;这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB ( \t )。</span><br><span class="line">也可以使用换行符 [ \n ]。</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(para_str)</span><br><span class="line"># 这是一个多行字符串的实例</span><br><span class="line"># 多行字符串可以使用制表符</span><br><span class="line"># TAB (      )。</span><br><span class="line"># 也可以使用换行符 [ </span><br><span class="line">#  ]。</span><br><span class="line">这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB (  )。</span><br><span class="line">也可以使用换行符 [ </span><br><span class="line"> ]。</span><br><span class="line"></span><br><span class="line">这是一个多行字符串的实例</span><br><span class="line">多行字符串可以使用制表符</span><br><span class="line">TAB (  )。</span><br><span class="line">也可以使用换行符 [ </span><br><span class="line"> ]。</span><br></pre></td></tr></table></figure><h2 id="2-字符串的切片与拼接"><a href="#2-字符串的切片与拼接" class="headerlink" title="2. 字符串的切片与拼接"></a>2. 字符串的切片与拼接</h2><ul><li>类似于元组具有不可修改性</li><li>从 0 开始 (和 Java 一样)</li><li>切片通常写成 <code>start:end</code> 这种形式，包括「<code>start</code> 索引」对应的元素，不包括「<code>end</code>索引」对应的元素。</li><li>索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。</li></ul><p>【例子】</p><p>[42]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">str1 &#x3D; &#39;I Love LsgoGroup&#39;</span><br><span class="line">print(str1[:6])  # I Love</span><br><span class="line">print(str1[5])  # e</span><br><span class="line">print(str1[:6] + &quot; 插入的字符串 &quot; + str1[6:])  </span><br><span class="line"># I Love 插入的字符串  LsgoGroup</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;Python&#39;</span><br><span class="line">print(s)  # Python</span><br><span class="line">print(s[2:4])  # th</span><br><span class="line">print(s[-5:-2])  # yth</span><br><span class="line">print(s[2])  # t</span><br><span class="line">print(s[-1])  # n</span><br><span class="line">I Love</span><br><span class="line">e</span><br><span class="line">I Love 插入的字符串  LsgoGroup</span><br><span class="line">Python</span><br><span class="line">th</span><br><span class="line">yth</span><br><span class="line">t</span><br><span class="line">n</span><br></pre></td></tr></table></figure><h2 id="3-字符串的常用内置方法"><a href="#3-字符串的常用内置方法" class="headerlink" title="3. 字符串的常用内置方法"></a>3. 字符串的常用内置方法</h2><ul><li><code>capitalize()</code> 将字符串的第一个字符转换为大写。</li></ul><p>【例子】</p><p>[43]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str2 &#x3D; &#39;xiaoxie&#39;</span><br><span class="line">print(str2.capitalize())  # Xiaoxie</span><br><span class="line">Xiaoxie</span><br></pre></td></tr></table></figure><ul><li><code>lower()</code> 转换字符串中所有大写字符为小写。</li><li><code>upper()</code> 转换字符串中的小写字母为大写。</li><li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</li></ul><p>【例子】</p><p>[44]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str2 &#x3D; &quot;DAXIExiaoxie&quot;</span><br><span class="line">print(str2.lower())  # daxiexiaoxie</span><br><span class="line">print(str2.upper())  # DAXIEXIAOXIE</span><br><span class="line">print(str2.swapcase())  # daxieXIAOXIE</span><br><span class="line">daxiexiaoxie</span><br><span class="line">DAXIEXIAOXIE</span><br><span class="line">daxieXIAOXIE</span><br></pre></td></tr></table></figure><ul><li><code>count(str, beg= 0,end=len(string))</code> 返回<code>str</code>在 string 里面出现的次数，如果<code>beg</code>或者<code>end</code>指定则返回指定范围内<code>str</code>出现的次数。</li></ul><p>【例子】</p><p>[45]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str2 &#x3D; &quot;DAXIExiaoxie&quot;</span><br><span class="line">print(str2.count(&#39;xi&#39;))  # 2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><ul><li><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以指定子字符串 <code>suffix</code> 结束，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li><li><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否以指定子字符串 <code>substr</code> 开头，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li></ul><p>【例子】</p><p>[46]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str2 &#x3D; &quot;DAXIExiaoxie&quot;</span><br><span class="line">print(str2.endswith(&#39;ie&#39;))  # True</span><br><span class="line">print(str2.endswith(&#39;xi&#39;))  # False</span><br><span class="line">print(str2.startswith(&#39;Da&#39;))  # False</span><br><span class="line">print(str2.startswith(&#39;DA&#39;))  # True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><ul><li><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code>，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li><li><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找。</li></ul><p>【例子】</p><p>[47]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str2 &#x3D; &quot;DAXIExiaoxie&quot;</span><br><span class="line">print(str2.find(&#39;xi&#39;))  # 5</span><br><span class="line">print(str2.find(&#39;ix&#39;))  # -1</span><br><span class="line">print(str2.rfind(&#39;xi&#39;))  # 9</span><br><span class="line">5</span><br><span class="line">-1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><ul><li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li></ul><p>【例子】</p><p>[48]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str3 &#x3D; &#39;12345&#39;</span><br><span class="line">print(str3.isnumeric())  # True</span><br><span class="line">str3 +&#x3D; &#39;a&#39;</span><br><span class="line">print(str3.isnumeric())  # False</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><ul><li><code>ljust(width[, fillchar])</code>返回一个原字符串左对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li><li><code>rjust(width[, fillchar])</code>返回一个原字符串右对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li></ul><p>【例子】</p><p>[49]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str4 &#x3D; &#39;1101&#39;</span><br><span class="line">print(str4.ljust(8, &#39;0&#39;))  # 11010000</span><br><span class="line">print(str4.rjust(8, &#39;0&#39;))  # 00001101</span><br><span class="line">11010000</span><br><span class="line">00001101</span><br></pre></td></tr></table></figure><ul><li><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。</li><li><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。</li><li><code>strip([chars])</code> 在字符串上执行<code>lstrip()</code>和<code>rstrip()</code>。</li></ul><p>【例子】</p><p>[50]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str5 &#x3D; &#39; I Love LsgoGroup &#39;</span><br><span class="line">print(str5.lstrip())  # &#39;I Love LsgoGroup &#39;</span><br><span class="line">print(str5.lstrip().strip(&#39;I&#39;))  # &#39; Love LsgoGroup &#39;</span><br><span class="line">print(str5.rstrip())  # &#39; I Love LsgoGroup&#39;</span><br><span class="line">print(str5.strip())  # &#39;I Love LsgoGroup&#39;</span><br><span class="line">print(str5.strip().strip(&#39;p&#39;))  # &#39;I Love LsgoGrou&#39;</span><br><span class="line">I Love LsgoGroup </span><br><span class="line"> Love LsgoGroup </span><br><span class="line"> I Love LsgoGroup</span><br><span class="line">I Love LsgoGroup</span><br><span class="line">I Love LsgoGrou</span><br></pre></td></tr></table></figure><ul><li><code>partition(sub)</code> 找到子字符串sub，把字符串分为一个三元组<code>(pre_sub,sub,fol_sub)</code>，如果字符串中不包含sub则返回<code>(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)</code>。</li><li><code>rpartition(sub)</code>类似于<code>partition()</code>方法，不过是从右边开始查找。</li></ul><p>【例子】</p><p>[51]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str5 &#x3D; &#39; I Love LsgoGroup &#39;</span><br><span class="line">print(str5.strip().partition(&#39;o&#39;))  # (&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)</span><br><span class="line">print(str5.strip().partition(&#39;m&#39;))  # (&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)</span><br><span class="line">print(str5.strip().rpartition(&#39;o&#39;))  # (&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)</span><br><span class="line">(&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)</span><br><span class="line">(&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)</span><br><span class="line">(&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)</span><br></pre></td></tr></table></figure><ul><li><code>replace(old, new [, max])</code> 把 将字符串中的<code>old</code>替换成<code>new</code>，如果<code>max</code>指定，则替换不超过<code>max</code>次。</li></ul><p>【例子】</p><p>[52]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str5 &#x3D; &#39; I Love LsgoGroup &#39;</span><br><span class="line">print(str5.strip().replace(&#39;I&#39;, &#39;We&#39;))  # We Love LsgoGroup</span><br><span class="line">We Love LsgoGroup</span><br></pre></td></tr></table></figure><ul><li><code>split(str=&quot;&quot;, num)</code> 不带参数默认是以空格为分隔符切片字符串，如果<code>num</code>参数有设置，则仅分隔<code>num</code>个子字符串，返回切片后的子字符串拼接的列表。</li></ul><p>【例子】</p><p>[53]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str5 &#x3D; &#39; I Love LsgoGroup &#39;</span><br><span class="line">print(str5.strip().split())  # [&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]</span><br><span class="line">print(str5.strip().split(&#39;o&#39;))  # [&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]</span><br><span class="line">[&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]</span><br><span class="line">[&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[54]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">u &#x3D; &quot;www.baidu.com.cn&quot;</span><br><span class="line"># 使用默认分隔符</span><br><span class="line">print(u.split())  # [&#39;www.baidu.com.cn&#39;]</span><br><span class="line"></span><br><span class="line"># 以&quot;.&quot;为分隔符</span><br><span class="line">print((u.split(&#39;.&#39;)))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]</span><br><span class="line"></span><br><span class="line"># 分割0次</span><br><span class="line">print((u.split(&quot;.&quot;, 0)))  # [&#39;www.baidu.com.cn&#39;]</span><br><span class="line"></span><br><span class="line"># 分割一次</span><br><span class="line">print((u.split(&quot;.&quot;, 1)))  # [&#39;www&#39;, &#39;baidu.com.cn&#39;]</span><br><span class="line"></span><br><span class="line"># 分割两次</span><br><span class="line">print(u.split(&quot;.&quot;, 2))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]</span><br><span class="line"></span><br><span class="line"># 分割两次，并取序列为1的项</span><br><span class="line">print((u.split(&quot;.&quot;, 2)[1]))  # baidu</span><br><span class="line"></span><br><span class="line"># 分割两次，并把分割后的三个部分保存到三个变量</span><br><span class="line">u1, u2, u3 &#x3D; u.split(&quot;.&quot;, 2)</span><br><span class="line">print(u1)  # www</span><br><span class="line">print(u2)  # baidu</span><br><span class="line">print(u3)  # com.cn</span><br><span class="line">[&#39;www.baidu.com.cn&#39;]</span><br><span class="line">[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]</span><br><span class="line">[&#39;www.baidu.com.cn&#39;]</span><br><span class="line">[&#39;www&#39;, &#39;baidu.com.cn&#39;]</span><br><span class="line">[&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]</span><br><span class="line">baidu</span><br><span class="line">www</span><br><span class="line">baidu</span><br><span class="line">com.cn</span><br></pre></td></tr></table></figure><p>【例子】去掉换行符</p><p>[55]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c &#x3D; &#39;&#39;&#39;say</span><br><span class="line">hello</span><br><span class="line">baby&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">print(c)</span><br><span class="line"># say</span><br><span class="line"># hello</span><br><span class="line"># baby</span><br><span class="line"></span><br><span class="line">print(c.split(&#39;\n&#39;))  # [&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]</span><br><span class="line">say</span><br><span class="line">hello</span><br><span class="line">baby</span><br><span class="line">[&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[56]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string &#x3D; &quot;hello boy&lt;[www.baidu.com]&gt;byebye&quot;</span><br><span class="line">print(string.split(&#39;[&#39;)[1].split(&#39;]&#39;)[0])  # www.baidu.com</span><br><span class="line">print(string.split(&#39;[&#39;)[1].split(&#39;]&#39;)[0].split(&#39;.&#39;))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]</span><br><span class="line">www.baidu.com</span><br><span class="line">[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]</span><br></pre></td></tr></table></figure><ul><li><code>splitlines([keepends])</code> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数<code>keepends</code>为 False，不包含换行符，如果为 True，则保留换行符。</li></ul><p>【例子】</p><p>[57]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str6 &#x3D; &#39;I \n Love \n LsgoGroup&#39;</span><br><span class="line">print(str6.splitlines())  # [&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]</span><br><span class="line">print(str6.splitlines(True))  # [&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]</span><br><span class="line">[&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]</span><br><span class="line">[&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]</span><br></pre></td></tr></table></figure><ul><li><code>maketrans(intab, outtab)</code> 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</li><li><code>translate(table, deletechars=&quot;&quot;)</code> 根据参数<code>table</code>给出的表，转换字符串的字符，要过滤掉的字符放到<code>deletechars</code>参数中。</li></ul><p>【例子】</p><p>[58]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str7 &#x3D; &#39;this is string example....wow!!!&#39;</span><br><span class="line">intab &#x3D; &#39;aeiou&#39;</span><br><span class="line">outtab &#x3D; &#39;12345&#39;</span><br><span class="line">trantab &#x3D; str7.maketrans(intab, outtab)</span><br><span class="line">print(trantab)  # &#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&#125;</span><br><span class="line">print(str7.translate(trantab))  # th3s 3s str3ng 2x1mpl2....w4w!!!</span><br><span class="line">&#123;97: 49, 101: 50, 105: 51, 111: 52, 117: 53&#125;</span><br><span class="line">th3s 3s str3ng 2x1mpl2....w4w!!!</span><br></pre></td></tr></table></figure><h2 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4. 字符串格式化"></a>4. 字符串格式化</h2><ul><li><code>format</code> 格式化函数</li></ul><p>【例子】</p><p>[59]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str8 &#x3D; &quot;&#123;0&#125; Love &#123;1&#125;&quot;.format(&#39;I&#39;, &#39;Lsgogroup&#39;)  # 位置参数</span><br><span class="line">print(str8)  # I Love Lsgogroup</span><br><span class="line"></span><br><span class="line">str8 &#x3D; &quot;&#123;a&#125; Love &#123;b&#125;&quot;.format(a&#x3D;&#39;I&#39;, b&#x3D;&#39;Lsgogroup&#39;)  # 关键字参数</span><br><span class="line">print(str8)  # I Love Lsgogroup</span><br><span class="line"></span><br><span class="line">str8 &#x3D; &quot;&#123;0&#125; Love &#123;b&#125;&quot;.format(&#39;I&#39;, b&#x3D;&#39;Lsgogroup&#39;)  # 位置参数要在关键字参数之前</span><br><span class="line">print(str8)  # I Love Lsgogroup</span><br><span class="line"></span><br><span class="line">str8 &#x3D; &#39;&#123;0:.2f&#125;&#123;1&#125;&#39;.format(27.658, &#39;GB&#39;)  # 保留小数点后两位</span><br><span class="line">print(str8)  # 27.66GB</span><br><span class="line">I Love Lsgogroup</span><br><span class="line">I Love Lsgogroup</span><br><span class="line">I Love Lsgogroup</span><br><span class="line">27.66GB</span><br></pre></td></tr></table></figure><ul><li>Python 字符串格式化符号</li></ul><table><thead><tr><th>符 号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串，用str()方法处理对象</td></tr><tr><td>%r</td><td>格式化字符串，用rper()方法处理对象</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>根据值的大小决定使用%f或%e</td></tr><tr><td>%G</td><td>作用同%g，根据值的大小决定使用%f或%E</td></tr></tbody></table><p>【例子】</p><p>[60]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;%c&#39; % 97)  # a</span><br><span class="line">print(&#39;%c %c %c&#39; % (97, 98, 99))  # a b c</span><br><span class="line">print(&#39;%d + %d &#x3D; %d&#39; % (4, 5, 9))  # 4 + 5 &#x3D; 9</span><br><span class="line">print(&quot;我叫 %s 今年 %d 岁!&quot; % (&#39;小明&#39;, 10))  # 我叫 小明 今年 10 岁!</span><br><span class="line">print(&#39;%o&#39; % 10)  # 12</span><br><span class="line">print(&#39;%x&#39; % 10)  # a</span><br><span class="line">print(&#39;%X&#39; % 10)  # A</span><br><span class="line">print(&#39;%f&#39; % 27.658)  # 27.658000</span><br><span class="line">print(&#39;%e&#39; % 27.658)  # 2.765800e+01</span><br><span class="line">print(&#39;%E&#39; % 27.658)  # 2.765800E+01</span><br><span class="line">print(&#39;%g&#39; % 27.658)  # 27.658</span><br><span class="line">text &#x3D; &quot;I am %d years old.&quot; % 22</span><br><span class="line">print(&quot;I said: %s.&quot; % text)  # I said: I am 22 years old..</span><br><span class="line">print(&quot;I said: %r.&quot; % text)  # I said: &#39;I am 22 years old.&#39;</span><br><span class="line">a</span><br><span class="line">a b c</span><br><span class="line">4 + 5 &#x3D; 9</span><br><span class="line">我叫 小明 今年 10 岁!</span><br><span class="line">12</span><br><span class="line">a</span><br><span class="line">A</span><br><span class="line">27.658000</span><br><span class="line">2.765800e+01</span><br><span class="line">2.765800E+01</span><br><span class="line">27.658</span><br><span class="line">I said: I am 22 years old..</span><br><span class="line">I said: &#39;I am 22 years old.&#39;.</span><br></pre></td></tr></table></figure><ul><li>格式化操作符辅助指令</li></ul><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td><code>m.n</code></td><td>m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</td></tr><tr><td><code>-</code></td><td>用作左对齐</td></tr><tr><td><code>+</code></td><td>在正数前面显示加号( + )</td></tr><tr><td><code>#</code></td><td>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td><code>0</code></td><td>显示的数字前面填充’0’而不是默认的空格</td></tr></tbody></table><p>【例子】</p><p>[61]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;%5.1f&#39; % 27.658)  # &#39; 27.7&#39;</span><br><span class="line">print(&#39;%.2e&#39; % 27.658)  # 2.77e+01</span><br><span class="line">print(&#39;%10d&#39; % 10)  # &#39;        10&#39;</span><br><span class="line">print(&#39;%-10d&#39; % 10)  # &#39;10        &#39;</span><br><span class="line">print(&#39;%+d&#39; % 10)  # +10</span><br><span class="line">print(&#39;%#o&#39; % 10)  # 0o12</span><br><span class="line">print(&#39;%#x&#39; % 108)  # 0x6c</span><br><span class="line">print(&#39;%010d&#39; % 5)  # 0000000005</span><br><span class="line"> 27.7</span><br><span class="line">2.77e+01</span><br><span class="line">        10</span><br><span class="line">10        </span><br><span class="line">+10</span><br><span class="line">0o12</span><br><span class="line">0x6c</span><br><span class="line">0000000005</span><br></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="1-可变类型与不可变类型"><a href="#1-可变类型与不可变类型" class="headerlink" title="1. 可变类型与不可变类型"></a>1. 可变类型与不可变类型</h2><ul><li>序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。</li><li>字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。</li></ul><p>那么如何快速判断一个数据类型 <code>X</code> 是不是可变类型的呢？两种方法：</p><ul><li>麻烦方法：用 <code>id(X)</code> 函数，对 X 进行某种操作，比较操作前后的 <code>id</code>，如果不一样，则 <code>X</code> 不可变，如果一样，则 <code>X</code> 可变。</li><li>便捷方法：用 <code>hash(X)</code>，只要不报错，证明 <code>X</code> 可被哈希，即不可变，反过来不可被哈希，即可变。</li></ul><p>【例子】</p><p>[62]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1</span><br><span class="line">print(id(i))  # 140732167000896</span><br><span class="line">i &#x3D; i + 2</span><br><span class="line">print(id(i))  # 140732167000960</span><br><span class="line"></span><br><span class="line">l &#x3D; [1, 2]</span><br><span class="line">print(id(l))  # 4300825160</span><br><span class="line">l.append(&#39;Python&#39;)</span><br><span class="line">print(id(l))  # 4300825160</span><br><span class="line">140731832701760</span><br><span class="line">140731832701824</span><br><span class="line">2131670369800</span><br><span class="line">2131670369800</span><br></pre></td></tr></table></figure><ul><li>整数 <code>i</code> 在加 1 之后的 <code>id</code> 和之前不一样，因此加完之后的这个 <code>i</code> (虽然名字没变)，但不是加之前的那个 <code>i</code> 了，因此整数是不可变类型。</li><li>列表 <code>l</code> 在附加 <code>&#39;Python&#39;</code> 之后的 <code>id</code> 和之前一样，因此列表是可变类型。</li></ul><p>【例子】</p><p>[1]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">print(hash(&#39;Name&#39;))  # 7047218704141848153</span><br><span class="line"></span><br><span class="line">print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831</span><br><span class="line"></span><br><span class="line">print(hash([1, 2, &#39;Python&#39;]))</span><br><span class="line"># TypeError: unhashable type: &#39;list&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-6668157630988609386</span><br><span class="line">-1857436431894091236</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-1-6416367464f8&gt; in &lt;module&gt;()</span><br><span class="line">      3 print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831</span><br><span class="line">      4 </span><br><span class="line">----&gt; 5 print(hash([1, 2, &#39;Python&#39;]))</span><br><span class="line">      6 # TypeError: unhashable type: &#39;list&#39;</span><br><span class="line"></span><br><span class="line">TypeError: unhashable type: &#39;list&#39;</span><br></pre></td></tr></table></figure><p>[ ]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(hash(&#123;1, 2, 3&#125;))</span><br><span class="line"># TypeError: unhashable type: &#39;set&#39;</span><br></pre></td></tr></table></figure><ul><li>数值、字符和元组 都能被哈希，因此它们是不可变类型。</li><li>列表、集合、字典不能被哈希，因此它是可变类型。</li></ul><h2 id="2-字典的定义"><a href="#2-字典的定义" class="headerlink" title="2. 字典的定义"></a>2. 字典的定义</h2><p>字典 是无序的 键:值（<code>key:value</code>）对集合，键必须是互不相同的（在同一个字典之内）。</p><ul><li><code>dict</code> 内部存放的顺序和 <code>key</code> 放入的顺序是没有关系的。</li><li><code>dict</code> 查找和插入的速度极快，不会随着 <code>key</code> 的增加而增加，但是需要占用大量的内存。</li></ul><p>字典 定义语法为 <code>{元素1, 元素2, ..., 元素n}</code></p><ul><li>其中每一个元素是一个「键值对」– 键:值 (<code>key:value</code>)</li><li>关键点是「大括号 {}」,「逗号 ,」和「冒号 :」</li><li>大括号 – 把所有元素绑在一起</li><li>逗号 – 将每个键值对分开</li><li>冒号 – 将键和值分开</li></ul><h2 id="3-创建和访问字典"><a href="#3-创建和访问字典" class="headerlink" title="3. 创建和访问字典"></a>3. 创建和访问字典</h2><p>【例子】</p><p>[88]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">brand &#x3D; [&#39;李宁&#39;, &#39;耐克&#39;, &#39;阿迪达斯&#39;]</span><br><span class="line">slogan &#x3D; [&#39;一切皆有可能&#39;, &#39;Just do it&#39;, &#39;Impossible is nothing&#39;]</span><br><span class="line">print(&#39;耐克的口号是:&#39;, slogan[brand.index(&#39;耐克&#39;)])  </span><br><span class="line"># 耐克的口号是: Just do it</span><br><span class="line"></span><br><span class="line">dic &#x3D; &#123;&#39;李宁&#39;: &#39;一切皆有可能&#39;, &#39;耐克&#39;: &#39;Just do it&#39;, &#39;阿迪达斯&#39;: &#39;Impossible is nothing&#39;&#125;</span><br><span class="line">print(&#39;耐克的口号是:&#39;, dic[&#39;耐克&#39;])  </span><br><span class="line"># 耐克的口号是: Just do it</span><br><span class="line">耐克的口号是: Just do it</span><br><span class="line">耐克的口号是: Just do it</span><br></pre></td></tr></table></figure><p>【例子】通过字符串或数值作为<code>key</code>来创建字典。</p><p>[2]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dic1 &#x3D; &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;</span><br><span class="line">print(dic1)  # &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;</span><br><span class="line">print(dic1[1])  # one</span><br><span class="line">print(dic1[4])  # KeyError: 4</span><br><span class="line"></span><br><span class="line">&#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;</span><br><span class="line">one</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-2-bb8d02bd63a3&gt; in &lt;module&gt;()</span><br><span class="line">      2 print(dic1)  # &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;</span><br><span class="line">      3 print(dic1[1])  # one</span><br><span class="line">----&gt; 4 print(dic1[4])  # KeyError: 4</span><br><span class="line"></span><br><span class="line">KeyError: 4</span><br></pre></td></tr></table></figure><p>[3]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic2 &#x3D; &#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&#125;</span><br><span class="line">print(dic2)  # &#123;&#39;wheat&#39;: 101, &#39;corn&#39;: 67, &#39;rice&#39;: 35&#125;</span><br><span class="line">print(dic2[&#39;rice&#39;])  # 35</span><br><span class="line">&#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&#125;</span><br><span class="line">35</span><br></pre></td></tr></table></figure><p>注意：如果我们取的键在字典中不存在，会直接报错<code>KeyError</code>。</p><p>【例子】通过元组作为<code>key</code>来创建字典，但一般不这样使用。</p><p>[91]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;(1, 2, 3): &quot;Tom&quot;, &quot;Age&quot;: 12, 3: [3, 5, 7]&#125;</span><br><span class="line">print(dic)  # &#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&#125;</span><br><span class="line">print(type(dic))  # &lt;class &#39;dict&#39;&gt;</span><br><span class="line">&#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&#125;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure><p>通过构造函数<code>dict</code>来创建字典。</p><ul><li><code>dict()</code> 创建一个空的字典。</li></ul><p>【例子】通过<code>key</code>直接把数据放入字典中，但一个<code>key</code>只能对应一个<code>value</code>，多次对一个<code>key</code>放入 <code>value</code>，后面的值会把前面的值冲掉。</p><p>[92]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; dict()</span><br><span class="line">dic[&#39;a&#39;] &#x3D; 1</span><br><span class="line">dic[&#39;b&#39;] &#x3D; 2</span><br><span class="line">dic[&#39;c&#39;] &#x3D; 3</span><br><span class="line"></span><br><span class="line">print(dic)</span><br><span class="line"># &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</span><br><span class="line"></span><br><span class="line">dic[&#39;a&#39;] &#x3D; 11</span><br><span class="line">print(dic)</span><br><span class="line"># &#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</span><br><span class="line"></span><br><span class="line">dic[&#39;d&#39;] &#x3D; 4</span><br><span class="line">print(dic)</span><br><span class="line"># &#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</span><br><span class="line">&#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</span><br><span class="line">&#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict(mapping)</code> new dictionary initialized from a mapping object’s (key, value) pairs</li></ul><p>【例子】</p><p>[95]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic1 &#x3D; dict([(&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)])</span><br><span class="line">print(dic1)  # &#123;&#39;cherry&#39;: 4098, &#39;apple&#39;: 4139, &#39;peach&#39;: 4127&#125;</span><br><span class="line"></span><br><span class="line">dic2 &#x3D; dict(((&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)))</span><br><span class="line">print(dic2)  # &#123;&#39;peach&#39;: 4127, &#39;cherry&#39;: 4098, &#39;apple&#39;: 4139&#125;</span><br><span class="line">&#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&#125;</span><br><span class="line">&#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict(**kwargs)</code> -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)</li></ul><p>【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。</p><p>[96]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; dict(name&#x3D;&#39;Tom&#39;, age&#x3D;10)</span><br><span class="line">print(dic)  # &#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&#125;</span><br><span class="line">print(type(dic))  # &lt;class &#39;dict&#39;&gt;</span><br><span class="line">&#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&#125;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure><h2 id="4-字典的内置方法"><a href="#4-字典的内置方法" class="headerlink" title="4. 字典的内置方法"></a>4. 字典的内置方法</h2><ul><li><code>dict.fromkeys(seq[, value])</code> 用于创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值。</li></ul><p>【例子】</p><p>[97]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">seq &#x3D; (&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;)</span><br><span class="line">dic1 &#x3D; dict.fromkeys(seq)</span><br><span class="line">print(dic1)</span><br><span class="line"># &#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&#125;</span><br><span class="line"></span><br><span class="line">dic2 &#x3D; dict.fromkeys(seq, 10)</span><br><span class="line">print(dic2)</span><br><span class="line"># &#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&#125;</span><br><span class="line"></span><br><span class="line">dic3 &#x3D; dict.fromkeys(seq, (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;))</span><br><span class="line">print(dic3)</span><br><span class="line"># &#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&#125;</span><br><span class="line">&#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&#125;</span><br><span class="line">&#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&#125;</span><br><span class="line">&#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict.keys()</code>返回一个可迭代对象，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有键。</li></ul><p>【例子】</p><p>[98]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;lsgogroup&#39;, &#39;Age&#39;: 7&#125;</span><br><span class="line">print(dic.keys())  # dict_keys([&#39;Name&#39;, &#39;Age&#39;])</span><br><span class="line">lst &#x3D; list(dic.keys())  # 转换为列表</span><br><span class="line">print(lst)  # [&#39;Name&#39;, &#39;Age&#39;]</span><br><span class="line">dict_keys([&#39;Name&#39;, &#39;Age&#39;])</span><br><span class="line">[&#39;Name&#39;, &#39;Age&#39;]</span><br></pre></td></tr></table></figure><ul><li><code>dict.values()</code>返回一个迭代器，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有值。</li></ul><p>【例子】</p><p>[100]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Zara&#39;&#125;</span><br><span class="line">print(dic.values())</span><br><span class="line"># dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])</span><br><span class="line"></span><br><span class="line">print(list(dic.values()))</span><br><span class="line"># [7, &#39;female&#39;, &#39;Zara&#39;]</span><br><span class="line">dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])</span><br><span class="line">[&#39;female&#39;, 7, &#39;Zara&#39;]</span><br></pre></td></tr></table></figure><ul><li><code>dict.items()</code>以列表返回可遍历的 (键, 值) 元组数组。</li></ul><p>【例子】</p><p>[101]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;</span><br><span class="line">print(dic.items())</span><br><span class="line"># dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])</span><br><span class="line"></span><br><span class="line">print(tuple(dic.items()))</span><br><span class="line"># ((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))</span><br><span class="line"></span><br><span class="line">print(list(dic.items()))</span><br><span class="line"># [(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]</span><br><span class="line">dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])</span><br><span class="line">((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))</span><br><span class="line">[(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]</span><br></pre></td></tr></table></figure><ul><li><code>dict.get(key, default=None)</code> 返回指定键的值，如果值不在字典中返回默认值。</li></ul><p>【例子】</p><p>[102]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;</span><br><span class="line">print(&quot;Age 值为 : %s&quot; % dic.get(&#39;Age&#39;))  # Age 值为 : 27</span><br><span class="line">print(&quot;Sex 值为 : %s&quot; % dic.get(&#39;Sex&#39;, &quot;NA&quot;))  # Sex 值为 : NA</span><br><span class="line">print(dic)  # &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;</span><br><span class="line">Age 值为 : 27</span><br><span class="line">Sex 值为 : NA</span><br><span class="line">&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict.setdefault(key, default=None)</code>和<code>get()</code>方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</li></ul><p>【例子】</p><p>[103]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;</span><br><span class="line">print(&quot;Age 键的值为 : %s&quot; % dic.setdefault(&#39;Age&#39;, None))  # Age 键的值为 : 7</span><br><span class="line">print(&quot;Sex 键的值为 : %s&quot; % dic.setdefault(&#39;Sex&#39;, None))  # Sex 键的值为 : None</span><br><span class="line">print(dic)  </span><br><span class="line"># &#123;&#39;Age&#39;: 7, &#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Sex&#39;: None&#125;</span><br><span class="line">Age 键的值为 : 7</span><br><span class="line">Sex 键的值为 : None</span><br><span class="line">&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Sex&#39;: None&#125;</span><br></pre></td></tr></table></figure><ul><li><code>key in dict</code> <code>in</code> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回<code>true</code>，否则返回<code>false</code>。而<code>not in</code>操作符刚好相反，如果键在字典 dict 里返回<code>false</code>，否则返回<code>true</code>。</li></ul><p>【例子】</p><p>[104]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;</span><br><span class="line"></span><br><span class="line"># in 检测键 Age 是否存在</span><br><span class="line">if &#39;Age&#39; in dic:</span><br><span class="line">    print(&quot;键 Age 存在&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;键 Age 不存在&quot;)</span><br><span class="line"></span><br><span class="line"># 检测键 Sex 是否存在</span><br><span class="line">if &#39;Sex&#39; in dic:</span><br><span class="line">    print(&quot;键 Sex 存在&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;键 Sex 不存在&quot;)</span><br><span class="line"></span><br><span class="line"># not in 检测键 Age 是否存在</span><br><span class="line">if &#39;Age&#39; not in dic:</span><br><span class="line">    print(&quot;键 Age 不存在&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;键 Age 存在&quot;)</span><br><span class="line"></span><br><span class="line"># 键 Age 存在</span><br><span class="line"># 键 Sex 不存在</span><br><span class="line"># 键 Age 存在</span><br><span class="line">键 Age 存在</span><br><span class="line">键 Sex 不存在</span><br><span class="line">键 Age 存在</span><br></pre></td></tr></table></figure><ul><li><code>dict.pop(key[,default])</code>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。若<code>key</code>不存在，则返回 <code>default</code> 值。</li><li><code>del dict[key]</code> 删除字典给定键 <code>key</code> 所对应的值。</li></ul><p>【例子】</p><p>[105]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dic1 &#x3D; &#123;1: &quot;a&quot;, 2: [1, 2]&#125;</span><br><span class="line">print(dic1.pop(1), dic1)  # a &#123;2: [1, 2]&#125;</span><br><span class="line"></span><br><span class="line"># 设置默认值，必须添加，否则报错</span><br><span class="line">print(dic1.pop(3, &quot;nokey&quot;), dic1)  # nokey &#123;2: [1, 2]&#125;</span><br><span class="line"></span><br><span class="line">del dic1[2]</span><br><span class="line">print(dic1)  # &#123;&#125;</span><br><span class="line">a &#123;2: [1, 2]&#125;</span><br><span class="line">nokey &#123;2: [1, 2]&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict.popitem()</code>随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常。</li></ul><p>【例子】</p><p>[107]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic1 &#x3D; &#123;1: &quot;a&quot;, 2: [1, 2]&#125;</span><br><span class="line">print(dic1.popitem())  # &#123;2: [1, 2]&#125;</span><br><span class="line">print(dic1)  # (1, &#39;a&#39;)</span><br><span class="line">(2, [1, 2])</span><br><span class="line">&#123;1: &#39;a&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict.clear()</code>用于删除字典内所有元素。</li></ul><p>【例子】</p><p>[108]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7&#125;</span><br><span class="line">print(&quot;字典长度 : %d&quot; % len(dic))  # 字典长度 : 2</span><br><span class="line">dic.clear()</span><br><span class="line">print(&quot;字典删除后长度 : %d&quot; % len(dic))  </span><br><span class="line"># 字典删除后长度 : 0</span><br><span class="line">字典长度 : 2</span><br><span class="line">字典删除后长度 : 0</span><br></pre></td></tr></table></figure><ul><li><code>dict.copy()</code>返回一个字典的浅复制。</li></ul><p>【例子】</p><p>[109]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic1 &#x3D; &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;</span><br><span class="line">dic2 &#x3D; dic1.copy()</span><br><span class="line">print(&quot;dic2&quot;)  </span><br><span class="line"># &#123;&#39;Age&#39;: 7, &#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Class&#39;: &#39;First&#39;&#125;</span><br><span class="line">dic2</span><br></pre></td></tr></table></figure><p>【例子】直接赋值和 copy 的区别</p><p>[110]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">dic1 &#x3D; &#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [1, 2, 3]&#125;</span><br><span class="line"></span><br><span class="line"># 引用对象</span><br><span class="line">dic2 &#x3D; dic1  </span><br><span class="line"># 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span><br><span class="line">dic3 &#x3D; dic1.copy()  </span><br><span class="line"></span><br><span class="line">print(id(dic1))  # 148635574728</span><br><span class="line">print(id(dic2))  # 148635574728</span><br><span class="line">print(id(dic3))  # 148635574344</span><br><span class="line"></span><br><span class="line"># 修改 data 数据</span><br><span class="line">dic1[&#39;user&#39;] &#x3D; &#39;root&#39;</span><br><span class="line">dic1[&#39;num&#39;].remove(1)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">print(dic1)  # &#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;</span><br><span class="line">print(dic2)  # &#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;</span><br><span class="line">print(dic3)  # &#123;&#39;user&#39;: &#39;runoob&#39;, &#39;num&#39;: [2, 3]&#125;</span><br><span class="line">2131669221448</span><br><span class="line">2131669221448</span><br><span class="line">2131669225120</span><br><span class="line">&#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;</span><br><span class="line">&#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;</span><br><span class="line">&#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [2, 3]&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dict.update(dict2)</code>把字典参数 <code>dict2</code> 的 <code>key:value</code>对 更新到字典 <code>dict</code> 里。</li></ul><p>【例子】</p><p>[111]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;</span><br><span class="line">dic2 &#x3D; &#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8&#125;</span><br><span class="line">dic.update(dic2)</span><br><span class="line">print(dic)  </span><br><span class="line"># &#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8, &#39;Name&#39;: &#39;Lsgogroup&#39;&#125;</span><br><span class="line">&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 8, &#39;Sex&#39;: &#39;female&#39;&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>Python 中<code>set</code>与<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>set</code>中，没有重复的<code>key</code>。</p><p>注意，<code>key</code>为不可变类型，即可哈希的值。</p><p>【例子】</p><p>[112]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num &#x3D; &#123;&#125;</span><br><span class="line">print(type(num))  # &lt;class &#39;dict&#39;&gt;</span><br><span class="line">num &#x3D; &#123;1, 2, 3, 4&#125;</span><br><span class="line">print(type(num))  # &lt;class &#39;set&#39;&gt;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&lt;class &#39;set&#39;&gt;</span><br></pre></td></tr></table></figure><h2 id="1-集合的创建"><a href="#1-集合的创建" class="headerlink" title="1. 集合的创建"></a>1. 集合的创建</h2><ul><li>先创建对象再加入元素。</li><li>在创建空集合的时候只能使用<code>s = set()</code>，因为<code>s = {}</code>创建的是空字典。</li></ul><p>【例子】</p><p>[113]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basket &#x3D; set()</span><br><span class="line">basket.add(&#39;apple&#39;)</span><br><span class="line">basket.add(&#39;banana&#39;)</span><br><span class="line">print(basket)  # &#123;&#39;banana&#39;, &#39;apple&#39;&#125;</span><br><span class="line">&#123;&#39;banana&#39;, &#39;apple&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li>直接把一堆元素用花括号括起来<code>{元素1, 元素2, ..., 元素n}</code>。</li><li>重复元素在<code>set</code>中会被自动被过滤。</li></ul><p>【例子】</p><p>[114]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basket &#x3D; &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;</span><br><span class="line">print(basket)  # &#123;&#39;banana&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;&#125;</span><br><span class="line">&#123;&#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>set(value)</code>工厂函数，把列表或元组转换成集合。</li></ul><p>【例子】</p><p>[115]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; set(&#39;abracadabra&#39;)</span><br><span class="line">print(a)  </span><br><span class="line"># &#123;&#39;r&#39;, &#39;b&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;&#125;</span><br><span class="line"></span><br><span class="line">b &#x3D; set((&quot;Google&quot;, &quot;Lsgogroup&quot;, &quot;Taobao&quot;, &quot;Taobao&quot;))</span><br><span class="line">print(b)  </span><br><span class="line"># &#123;&#39;Taobao&#39;, &#39;Lsgogroup&#39;, &#39;Google&#39;&#125;</span><br><span class="line"></span><br><span class="line">c &#x3D; set([&quot;Google&quot;, &quot;Lsgogroup&quot;, &quot;Taobao&quot;, &quot;Google&quot;])</span><br><span class="line">print(c)  </span><br><span class="line"># &#123;&#39;Taobao&#39;, &#39;Lsgogroup&#39;, &#39;Google&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&#125;</span><br><span class="line">&#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&#125;</span><br></pre></td></tr></table></figure><p>【例子】去掉列表中重复的元素</p><p>[116]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst &#x3D; [0, 1, 2, 3, 4, 5, 5, 3, 1]</span><br><span class="line"></span><br><span class="line">temp &#x3D; []</span><br><span class="line">for item in lst:</span><br><span class="line">    if item not in temp:</span><br><span class="line">        temp.append(item)</span><br><span class="line"></span><br><span class="line">print(temp)  # [0, 1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">a &#x3D; set(lst)</span><br><span class="line">print(list(a))  # [0, 1, 2, 3, 4, 5]</span><br><span class="line">[0, 1, 2, 3, 4, 5]</span><br><span class="line">[0, 1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。</p><p>由于 <code>set</code> 存储的是无序集合，所以我们不可以为集合创建索引或执行切片(slice)操作，也没有键(keys)可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。</p><h2 id="2-访问集合中的值"><a href="#2-访问集合中的值" class="headerlink" title="2. 访问集合中的值"></a>2. 访问集合中的值</h2><ul><li>可以使用<code>len()</code>內建函数得到集合的大小。</li></ul><p>【例子】</p><p>[117]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])</span><br><span class="line">print(len(s))  # 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><ul><li>可以使用<code>for</code>把集合中的数据一个个读取出来。</li></ul><p>【例子】</p><p>[7]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])</span><br><span class="line">for item in s:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"># Baidu</span><br><span class="line"># Google</span><br><span class="line"># Taobao</span><br><span class="line">Baidu</span><br><span class="line">Taobao</span><br><span class="line">Google</span><br></pre></td></tr></table></figure><ul><li>可以通过<code>in</code>或<code>not in</code>判断一个元素是否在集合中已经存在</li></ul><p>【例子】</p><p>[119]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])</span><br><span class="line">print(&#39;Taobao&#39; in s)  # True</span><br><span class="line">print(&#39;Facebook&#39; not in s)  # True</span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="3-集合的内置方法"><a href="#3-集合的内置方法" class="headerlink" title="3. 集合的内置方法"></a>3. 集合的内置方法</h2><ul><li><code>set.add(elmnt)</code>用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li></ul><p>【例子】</p><p>[120]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruits &#x3D; &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;</span><br><span class="line">fruits.add(&quot;orange&quot;)</span><br><span class="line">print(fruits)  </span><br><span class="line"># &#123;&#39;orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</span><br><span class="line"></span><br><span class="line">fruits.add(&quot;apple&quot;)</span><br><span class="line">print(fruits)  </span><br><span class="line"># &#123;&#39;orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</span><br><span class="line">&#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</span><br><span class="line">&#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.update(set)</code>用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li></ul><p>【例子】</p><p>[121]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;google&quot;, &quot;baidu&quot;, &quot;apple&quot;&#125;</span><br><span class="line">x.update(y)</span><br><span class="line">print(x)</span><br><span class="line"># &#123;&#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;google&#39;, &#39;baidu&#39;&#125;</span><br><span class="line"></span><br><span class="line">y.update([&quot;lsgo&quot;, &quot;dreamtech&quot;])</span><br><span class="line">print(y)</span><br><span class="line"># &#123;&#39;lsgo&#39;, &#39;baidu&#39;, &#39;dreamtech&#39;, &#39;apple&#39;, &#39;google&#39;&#125;</span><br><span class="line">&#123;&#39;google&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;apple&#39;, &#39;baidu&#39;&#125;</span><br><span class="line">&#123;&#39;apple&#39;, &#39;dreamtech&#39;, &#39;lsgo&#39;, &#39;google&#39;, &#39;baidu&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.remove(item)</code> 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li></ul><p>【例子】</p><p>[122]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits &#x3D; &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;</span><br><span class="line">fruits.remove(&quot;banana&quot;)</span><br><span class="line">print(fruits)  # &#123;&#39;apple&#39;, &#39;cherry&#39;&#125;</span><br><span class="line">&#123;&#39;cherry&#39;, &#39;apple&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.discard(value)</code> 用于移除指定的集合元素。<code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</li></ul><p>【例子】</p><p>[123]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits &#x3D; &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;</span><br><span class="line">fruits.discard(&quot;banana&quot;)</span><br><span class="line">print(fruits)  # &#123;&#39;apple&#39;, &#39;cherry&#39;&#125;</span><br><span class="line">&#123;&#39;cherry&#39;, &#39;apple&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.pop()</code> 用于随机移除一个元素。</li></ul><p>【例子】</p><p>[66]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits &#x3D; &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;</span><br><span class="line">x &#x3D; fruits.pop()</span><br><span class="line">print(fruits)  # &#123;&#39;cherry&#39;, &#39;apple&#39;&#125;</span><br><span class="line">print(x)  # banana</span><br><span class="line">&#123;&#39;banana&#39;, &#39;apple&#39;&#125;</span><br><span class="line">cherry</span><br></pre></td></tr></table></figure><p>由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。</p><ul><li><code>set.intersection(set1, set2)</code> 返回两个集合的交集。</li><li><code>set1 &amp; set2</code> 返回两个集合的交集。</li><li><code>set.intersection_update(set1, set2)</code> 交集，在原始的集合上移除不重叠的元素。</li></ul><p>【例子】</p><p>[67]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; set(&#39;abracadabra&#39;)</span><br><span class="line">b &#x3D; set(&#39;alacazam&#39;)</span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;</span><br><span class="line">print(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;</span><br><span class="line"></span><br><span class="line">c &#x3D; a.intersection(b)</span><br><span class="line">print(c)  # &#123;&#39;a&#39;, &#39;c&#39;&#125;</span><br><span class="line">print(a &amp; b)  # &#123;&#39;c&#39;, &#39;a&#39;&#125;</span><br><span class="line">print(a)  # &#123;&#39;a&#39;, &#39;r&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;</span><br><span class="line"></span><br><span class="line">a.intersection_update(b)</span><br><span class="line">print(a)  # &#123;&#39;a&#39;, &#39;c&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;a&#39;, &#39;c&#39;&#125;</span><br><span class="line">&#123;&#39;a&#39;, &#39;c&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;a&#39;, &#39;c&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.union(set1, set2)</code> 返回两个集合的并集。</li><li><code>set1 | set2</code> 返回两个集合的并集。</li></ul><p>【例子】</p><p>[68]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; set(&#39;abracadabra&#39;)</span><br><span class="line">b &#x3D; set(&#39;alacazam&#39;)</span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;</span><br><span class="line">print(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;</span><br><span class="line"></span><br><span class="line">print(a | b)  </span><br><span class="line"># &#123;&#39;l&#39;, &#39;d&#39;, &#39;m&#39;, &#39;b&#39;, &#39;a&#39;, &#39;r&#39;, &#39;z&#39;, &#39;c&#39;&#125;</span><br><span class="line"></span><br><span class="line">c &#x3D; a.union(b)</span><br><span class="line">print(c)  </span><br><span class="line"># &#123;&#39;c&#39;, &#39;a&#39;, &#39;d&#39;, &#39;m&#39;, &#39;r&#39;, &#39;b&#39;, &#39;z&#39;, &#39;l&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.difference(set)</code> 返回集合的差集。</li><li><code>set1 - set2</code> 返回集合的差集。</li><li><code>set.difference_update(set)</code> 集合的差集，直接在原来的集合中移除元素，没有返回值。</li></ul><p>【例子】</p><p>[69]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; set(&#39;abracadabra&#39;)</span><br><span class="line">b &#x3D; set(&#39;alacazam&#39;)</span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;</span><br><span class="line">print(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;</span><br><span class="line"></span><br><span class="line">c &#x3D; a.difference(b)</span><br><span class="line">print(c)  # &#123;&#39;b&#39;, &#39;d&#39;, &#39;r&#39;&#125;</span><br><span class="line">print(a - b)  # &#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;</span><br><span class="line"></span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&#125;</span><br><span class="line">a.difference_update(b)</span><br><span class="line">print(a)  # &#123;&#39;d&#39;, &#39;r&#39;, &#39;b&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;</span><br><span class="line">&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.symmetric_difference(set)</code>返回集合的异或。</li><li><code>set1 ^ set2</code> 返回集合的异或。</li><li><code>set.symmetric_difference_update(set)</code>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li></ul><p>【例子】</p><p>[70]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; set(&#39;abracadabra&#39;)</span><br><span class="line">b &#x3D; set(&#39;alacazam&#39;)</span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;</span><br><span class="line">print(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;</span><br><span class="line"></span><br><span class="line">c &#x3D; a.symmetric_difference(b)</span><br><span class="line">print(c)  # &#123;&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&#125;</span><br><span class="line">print(a ^ b)  # &#123;&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&#125;</span><br><span class="line"></span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&#125;</span><br><span class="line">a.symmetric_difference_update(b)</span><br><span class="line">print(a)  # &#123;&#39;r&#39;, &#39;b&#39;, &#39;m&#39;, &#39;l&#39;, &#39;z&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&#125;</span><br><span class="line">&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line">&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set.issubset(set)</code>判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li><li><code>set1 &lt;= set2</code> 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li></ul><p>【例子】</p><p>[71]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;&#125;</span><br><span class="line">z &#x3D; x.issubset(y)</span><br><span class="line">print(z)  # True</span><br><span class="line">print(x &lt;&#x3D; y)  # True</span><br><span class="line"></span><br><span class="line">x &#x3D; &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;&#125;</span><br><span class="line">z &#x3D; x.issubset(y)</span><br><span class="line">print(z)  # False</span><br><span class="line">print(x &lt;&#x3D; y)  # False</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure><ul><li><code>set.issuperset(set)</code>用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li><li><code>set1 &gt;= set2</code> 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li></ul><p>【例子】</p><p>[72]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">z &#x3D; x.issuperset(y)</span><br><span class="line">print(z)  # True</span><br><span class="line">print(x &gt;&#x3D; y)  # True</span><br><span class="line"></span><br><span class="line">x &#x3D; &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">z &#x3D; x.issuperset(y)</span><br><span class="line">print(z)  # False</span><br><span class="line">print(x &gt;&#x3D; y)  # False</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure><ul><li><code>set.isdisjoint(set)</code> 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li></ul><p>【例子】</p><p>[73]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">z &#x3D; x.isdisjoint(y)</span><br><span class="line">print(z)  # False</span><br><span class="line"></span><br><span class="line">x &#x3D; &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;m&quot;, &quot;g&quot;&#125;</span><br><span class="line">y &#x3D; &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">z &#x3D; x.isdisjoint(y)</span><br><span class="line">print(z)  # True</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="4-集合的转换"><a href="#4-集合的转换" class="headerlink" title="4. 集合的转换"></a>4. 集合的转换</h2><p>【例子】</p><p>[74]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">se &#x3D; set(range(4))</span><br><span class="line">li &#x3D; list(se)</span><br><span class="line">tu &#x3D; tuple(se)</span><br><span class="line"></span><br><span class="line">print(se, type(se))  # &#123;0, 1, 2, 3&#125; &lt;class &#39;set&#39;&gt;</span><br><span class="line">print(li, type(li))  # [0, 1, 2, 3] &lt;class &#39;list&#39;&gt;</span><br><span class="line">print(tu, type(tu))  # (0, 1, 2, 3) &lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&#123;0, 1, 2, 3&#125; &lt;class &#39;set&#39;&gt;</span><br><span class="line">[0, 1, 2, 3] &lt;class &#39;list&#39;&gt;</span><br><span class="line">(0, 1, 2, 3) &lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure><h2 id="5-不可变集合"><a href="#5-不可变集合" class="headerlink" title="5. 不可变集合"></a>5. 不可变集合</h2><p>Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫<code>frozenset</code>。需要注意的是<code>frozenset</code>仍然可以进行集合操作，只是不能用带有<code>update</code>的方法。</p><ul><li><code>frozenset([iterable])</code> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li></ul><p>【例子】</p><p>[75]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; frozenset(range(10))  # 生成一个新的不可变集合</span><br><span class="line">print(a)  </span><br><span class="line"># frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)</span><br><span class="line"></span><br><span class="line">b &#x3D; frozenset(&#39;lsgogroup&#39;)</span><br><span class="line">print(b)  </span><br><span class="line"># frozenset(&#123;&#39;g&#39;, &#39;s&#39;, &#39;p&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;l&#39;&#125;)</span><br><span class="line">frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)</span><br><span class="line">frozenset(&#123;&#39;l&#39;, &#39;g&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;s&#39;, &#39;p&#39;&#125;)</span><br></pre></td></tr></table></figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p>在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p><h2 id="1-针对序列的内置函数"><a href="#1-针对序列的内置函数" class="headerlink" title="1. 针对序列的内置函数"></a>1. 针对序列的内置函数</h2><ul><li><code>list(sub)</code> 把一个可迭代对象转换为列表。</li></ul><p>【例子】</p><p>[76]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; list()</span><br><span class="line">print(a)  # []</span><br><span class="line"></span><br><span class="line">b &#x3D; &#39;I Love LsgoGroup&#39;</span><br><span class="line">b &#x3D; list(b)</span><br><span class="line">print(b)  </span><br><span class="line"># [&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]</span><br><span class="line"></span><br><span class="line">c &#x3D; (1, 1, 2, 3, 5, 8)</span><br><span class="line">c &#x3D; list(c)</span><br><span class="line">print(c)  # [1, 1, 2, 3, 5, 8]</span><br><span class="line">[]</span><br><span class="line">[&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]</span><br><span class="line">[1, 1, 2, 3, 5, 8]</span><br></pre></td></tr></table></figure><ul><li><code>tuple(sub)</code> 把一个可迭代对象转换为元组。</li></ul><p>【例子】</p><p>[77]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; tuple()</span><br><span class="line">print(a)  # ()</span><br><span class="line"></span><br><span class="line">b &#x3D; &#39;I Love LsgoGroup&#39;</span><br><span class="line">b &#x3D; tuple(b)</span><br><span class="line">print(b)  </span><br><span class="line"># (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)</span><br><span class="line"></span><br><span class="line">c &#x3D; [1, 1, 2, 3, 5, 8]</span><br><span class="line">c &#x3D; tuple(c)</span><br><span class="line">print(c)  # (1, 1, 2, 3, 5, 8)</span><br><span class="line">()</span><br><span class="line">(&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)</span><br><span class="line">(1, 1, 2, 3, 5, 8)</span><br></pre></td></tr></table></figure><ul><li><code>str(obj)</code> 把obj对象转换为字符串</li></ul><p>【例子】</p><p>[78]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 123</span><br><span class="line">a &#x3D; str(a)</span><br><span class="line">print(a)  # 123</span><br><span class="line">123</span><br></pre></td></tr></table></figure><ul><li><pre><code>len(s)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  返回对象（字符、列表、元组等）长度或元素个数。</span><br><span class="line"></span><br><span class="line">  - &#96;s&#96; -- 对象。</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[79]:</span><br></pre></td></tr></table></figure>a = list()print(len(a))  # 0</code></pre></li></ul><p>b = (‘I’, ‘ ‘, ‘L’, ‘o’, ‘v’, ‘e’, ‘ ‘, ‘L’, ‘s’, ‘g’, ‘o’, ‘G’, ‘r’, ‘o’, ‘u’, ‘p’)<br>print(len(b))  # 16</p><p>c = ‘I Love LsgoGroup’<br>print(len(c))  # 16<br>0<br>16<br>16</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;max(sub)&#96;返回序列或者参数集合中的最大值</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[80]:</span><br></pre></td></tr></table></figure><p>print(max(1, 2, 3, 4, 5))  # 5<br>print(max([-8, 99, 3, 7, 83]))  # 99<br>print(max(‘IloveLsgoGroup’))  # v<br>5<br>99<br>v</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;min(sub)&#96;返回序列或参数集合中的最小值</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[81]:</span><br></pre></td></tr></table></figure><p>print(min(1, 2, 3, 4, 5))  # 1<br>print(min([-8, 99, 3, 7, 83]))  # -8<br>print(min(‘IloveLsgoGroup’))  # G<br>1<br>-8<br>G</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;sum(iterable[, start&#x3D;0])&#96; 返回序列&#96;iterable&#96;与可选参数&#96;start&#96;的总和。</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[82]:</span><br></pre></td></tr></table></figure><p>print(sum([1, 3, 5, 7, 9]))  # 25<br>print(sum([1, 3, 5, 7, 9], 10))  # 35<br>print(sum((1, 3, 5, 7, 9)))  # 25<br>print(sum((1, 3, 5, 7, 9), 20))  # 45<br>25<br>35<br>25<br>45</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure><p>  sorted(iterable, key=None, reverse=False)<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  对所有可迭代的对象进行排序操作。</span><br><span class="line"></span><br><span class="line">  - &#96;iterable&#96; -- 可迭代对象。</span><br><span class="line">  - &#96;key&#96; -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span><br><span class="line">  - &#96;reverse&#96; -- 排序规则，&#96;reverse &#x3D; True&#96; 降序 ， &#96;reverse &#x3D; False&#96; 升序（默认）。</span><br><span class="line">  - 返回重新排序的列表。</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[83]:</span><br></pre></td></tr></table></figure><br>x = [-8, 99, 3, 7, 83]<br>print(sorted(x))  # [-8, 3, 7, 83, 99]<br>print(sorted(x, reverse=True))  # [99, 83, 7, 3, -8]</p><p>t = ({“age”: 20, “name”: “a”}, {“age”: 25, “name”: “b”}, {“age”: 10, “name”: “c”})<br>x = sorted(t, key=lambda a: a[“age”])<br>print(x)</p><h1 id="‘age’-10-‘name’-‘c’-‘age’-20-‘name’-‘a’-‘age’-25-‘name’-‘b’"><a href="#‘age’-10-‘name’-‘c’-‘age’-20-‘name’-‘a’-‘age’-25-‘name’-‘b’" class="headerlink" title="[{‘age’: 10, ‘name’: ‘c’}, {‘age’: 20, ‘name’: ‘a’}, {‘age’: 25, ‘name’: ‘b’}]"></a>[{‘age’: 10, ‘name’: ‘c’}, {‘age’: 20, ‘name’: ‘a’}, {‘age’: 25, ‘name’: ‘b’}]</h1><p>[-8, 3, 7, 83, 99]<br>[99, 83, 7, 3, -8]<br>[{‘age’: 10, ‘name’: ‘c’}, {‘age’: 20, ‘name’: ‘a’}, {‘age’: 25, ‘name’: ‘b’}]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure><p>  reversed(seq)<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  函数返回一个反转的迭代器。</span><br><span class="line"></span><br><span class="line">  - &#96;seq&#96; -- 要转换的序列，可以是 tuple, string, list 或 range。</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[84]:</span><br></pre></td></tr></table></figure><br>s = ‘lsgogroup’<br>x = reversed(s)<br>print(type(x))  # &lt;class ‘reversed’&gt;<br>print(x)  # &lt;reversed object at 0x000002507E8EC2C8&gt;<br>print(list(x))</p><h1 id="‘p’-‘u’-‘o’-‘r’-‘g’-‘o’-‘g’-‘s’-‘l’"><a href="#‘p’-‘u’-‘o’-‘r’-‘g’-‘o’-‘g’-‘s’-‘l’" class="headerlink" title="[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]"></a>[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]</h1><p>t = (‘l’, ‘s’, ‘g’, ‘o’, ‘g’, ‘r’, ‘o’, ‘u’, ‘p’)<br>print(list(reversed(t)))</p><h1 id="‘p’-‘u’-‘o’-‘r’-‘g’-‘o’-‘g’-‘s’-‘l’-1"><a href="#‘p’-‘u’-‘o’-‘r’-‘g’-‘o’-‘g’-‘s’-‘l’-1" class="headerlink" title="[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]"></a>[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]</h1><p>r = range(5, 9)<br>print(list(reversed(r)))</p><h1 id="8-7-6-5"><a href="#8-7-6-5" class="headerlink" title="[8, 7, 6, 5]"></a>[8, 7, 6, 5]</h1><p>x = [-8, 99, 3, 7, 83]<br>print(list(reversed(x)))</p><h1 id="83-7-3-99-8"><a href="#83-7-3-99-8" class="headerlink" title="[83, 7, 3, 99, -8]"></a>[83, 7, 3, 99, -8]</h1><p>&lt;class ‘reversed’&gt;<br>&lt;reversed object at 0x000001F0517DFD68&gt;<br>[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]<br>[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]<br>[8, 7, 6, 5]<br>[83, 7, 3, 99, -8]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;enumerate(sequence, [start&#x3D;0])&#96;</span><br><span class="line"></span><br><span class="line">【例子】用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</span><br><span class="line"></span><br><span class="line">[85]:</span><br></pre></td></tr></table></figure><p>seasons = [‘Spring’, ‘Summer’, ‘Fall’, ‘Winter’]<br>a = list(enumerate(seasons))<br>print(a)  </p><h1 id="0-‘Spring’-1-‘Summer’-2-‘Fall’-3-‘Winter’"><a href="#0-‘Spring’-1-‘Summer’-2-‘Fall’-3-‘Winter’" class="headerlink" title="[(0, ‘Spring’), (1, ‘Summer’), (2, ‘Fall’), (3, ‘Winter’)]"></a>[(0, ‘Spring’), (1, ‘Summer’), (2, ‘Fall’), (3, ‘Winter’)]</h1><p>b = list(enumerate(seasons, 1))<br>print(b)  </p><h1 id="1-‘Spring’-2-‘Summer’-3-‘Fall’-4-‘Winter’"><a href="#1-‘Spring’-2-‘Summer’-3-‘Fall’-4-‘Winter’" class="headerlink" title="[(1, ‘Spring’), (2, ‘Summer’), (3, ‘Fall’), (4, ‘Winter’)]"></a>[(1, ‘Spring’), (2, ‘Summer’), (3, ‘Fall’), (4, ‘Winter’)]</h1><p>for i, element in a:<br>    print(‘{0},{1}’.format(i, element))</p><h1 id="0-Spring"><a href="#0-Spring" class="headerlink" title="0,Spring"></a>0,Spring</h1><h1 id="1-Summer"><a href="#1-Summer" class="headerlink" title="1,Summer"></a>1,Summer</h1><h1 id="2-Fall"><a href="#2-Fall" class="headerlink" title="2,Fall"></a>2,Fall</h1><h1 id="3-Winter"><a href="#3-Winter" class="headerlink" title="3,Winter"></a>3,Winter</h1><p>[(0, ‘Spring’), (1, ‘Summer’), (2, ‘Fall’), (3, ‘Winter’)]<br>[(1, ‘Spring’), (2, ‘Summer’), (3, ‘Fall’), (4, ‘Winter’)]<br>0,Spring<br>1,Summer<br>2,Fall<br>3,Winter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure><p>  zip(iter1 [,iter2 […]])<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</span><br><span class="line">  - 我们可以使用 &#96;list()&#96; 转换来输出列表。</span><br><span class="line">  - 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 &#96;*&#96; 号操作符，可以将元组解压为列表。</span><br><span class="line"></span><br><span class="line">【例子】</span><br><span class="line"></span><br><span class="line">[86]:</span><br></pre></td></tr></table></figure><br>a = [1, 2, 3]<br>b = [4, 5, 6]<br>c = [4, 5, 6, 7, 8]</p><p>zipped = zip(a, b)<br>print(zipped)  # &lt;zip object at 0x000000C5D89EDD88&gt;<br>print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]<br>zipped = zip(a, c)<br>print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]</p><p>a1, a2 = zip(*zip(a, b))<br>print(list(a1))  # [1, 2, 3]<br>print(list(a2))  # [4, 5, 6]<br>&lt;zip object at 0x000001F0517E38C8&gt;<br>[(1, 4), (2, 5), (3, 6)]<br>[(1, 4), (2, 5), (3, 6)]<br>[1, 2, 3]<br>[4, 5, 6]<br>```</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python入门-中&quot;&gt;&lt;a href=&quot;#Python入门-中&quot; class=&quot;headerlink&quot; title=&quot;Python入门(中)&quot;&gt;&lt;/a&gt;Python入门(中)&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; </summary>
      
    
    
    
    <category term="python基础" scheme="https://wicherqaq.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>python入门（上）</title>
    <link href="https://wicherqaq.github.io/2020/09/10/python%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://wicherqaq.github.io/2020/09/10/python%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2020-09-10T02:51:11.000Z</published>
    <updated>2020-09-10T02:57:24.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门-上"><a href="#Python入门-上" class="headerlink" title="Python入门(上)"></a>Python入门(上)</h1><p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p><p>本实验包括以下内容：</p><ul><li>变量、运算符与数据类型<ul><li>注释</li><li>运算符</li><li>变量和赋值</li><li>数据类型与转换</li><li>print() 函数</li></ul></li><li>位运算<ul><li>原码、反码和补码</li><li>按位非操作 ~</li><li>按位与操作 &amp;</li><li>按位或操作 |</li><li>按位异或操作 ^</li><li>按位左移操作 &lt;&lt;</li><li>按位右移操作 &gt;&gt;</li><li>利用位运算实现快速计算</li><li>利用位运算实现整数集合</li></ul></li><li>条件语句<ul><li>if 语句</li><li>if - else 语句</li><li>if - elif - else 语句</li><li>assert 关键词</li></ul></li><li>循环语句<ul><li>while 循环</li><li>while - else 循环</li><li>for 循环</li><li>for - else 循环</li><li>range() 函数</li><li>enumerate()函数</li><li>break 语句</li><li>continue 语句</li><li>pass 语句</li><li>推导式</li></ul></li><li>异常处理<ul><li>Python 标准异常总结</li><li>Python 标准警告总结</li><li>try - except 语句</li><li>try - except - finally 语句</li><li>try - except - else 语句</li><li>raise语句</li></ul></li></ul><h1 id="变量、运算符与数据类型"><a href="#变量、运算符与数据类型" class="headerlink" title="变量、运算符与数据类型"></a>变量、运算符与数据类型</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h2><ul><li>在 Python 中，<code>#</code> 表示注释，作用于整行。</li></ul><p>【例子】单行注释</p><p>[1]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个注释</span><br><span class="line">print(&quot;Hello world&quot;)</span><br><span class="line"></span><br><span class="line"># Hello world</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><ul><li><code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 或者 <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 表示区间注释，在三引号之间的所有内容被注释</li></ul><p>【例子】多行注释</p><p>[2]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">这是多行注释，用三个单引号</span><br><span class="line">这是多行注释，用三个单引号</span><br><span class="line">这是多行注释，用三个单引号</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(&quot;Hello china&quot;) </span><br><span class="line"># Hello china</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是多行注释，用三个双引号</span><br><span class="line">这是多行注释，用三个双引号 </span><br><span class="line">这是多行注释，用三个双引号</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(&quot;hello china&quot;) </span><br><span class="line"># hello china</span><br><span class="line">Hello china</span><br><span class="line">hello china</span><br></pre></td></tr></table></figure><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><p><strong>算术运算符</strong></p><table><thead><tr><th>操作符</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td><td><code>1 + 1</code></td></tr><tr><td><code>-</code></td><td>减</td><td><code>2 - 1</code></td></tr><tr><td><code>*</code></td><td>乘</td><td><code>3 * 4</code></td></tr><tr><td><code>/</code></td><td>除</td><td><code>3 / 4</code></td></tr><tr><td><code>//</code></td><td>整除（地板除）</td><td><code>3 // 4</code></td></tr><tr><td><code>%</code></td><td>取余</td><td><code>3 % 4</code></td></tr><tr><td><code>**</code></td><td>幂</td><td><code>2 ** 3</code></td></tr></tbody></table><p>【例子】</p><p>[4]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(1 + 1)  # 2</span><br><span class="line">print(2 - 1)  # 1</span><br><span class="line">print(3 * 4)  # 12</span><br><span class="line">print(3 &#x2F; 4)  # 0.75</span><br><span class="line">print(3 &#x2F;&#x2F; 4)  # 0</span><br><span class="line">print(3 % 4)  # 3</span><br><span class="line">print(2 ** 4)  # 8</span><br><span class="line">print(5&#x2F;&#x2F;10)</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">12</span><br><span class="line">0.75</span><br><span class="line">0</span><br><span class="line">3</span><br><span class="line">16</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>比较运算符</strong></p><table><thead><tr><th>操作符</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>大于</td><td><code>2 &gt; 1</code></td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>2 &gt;= 4</code></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>1 &lt; 2</code></td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>5 &lt;= 2</code></td></tr><tr><td><code>==</code></td><td>等于</td><td><code>3 == 4</code></td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>3 != 5</code></td></tr></tbody></table><p>【例子】</p><p>[4]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(2 &gt; 1)  # True</span><br><span class="line">print(2 &gt;&#x3D; 4)  # False</span><br><span class="line">print(1 &lt; 2)  # True</span><br><span class="line">print(5 &lt;&#x3D; 2)  # False</span><br><span class="line">print(3 &#x3D;&#x3D; 4)  # False</span><br><span class="line">print(3 !&#x3D; 5)  # True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符</strong></p><table><thead><tr><th>操作符</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td><code>and</code></td><td>与</td><td><code>(3 &gt; 2) and (3 &lt; 5)</code></td></tr><tr><td><code>or</code></td><td>或</td><td><code>(1 &gt; 3) or (9 &lt; 2)</code></td></tr><tr><td><code>not</code></td><td>非</td><td><code>not (2 &gt; 1)</code></td></tr></tbody></table><p>【例子】</p><p>[5]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print((3 &gt; 2) and (3 &lt; 5))  # True</span><br><span class="line">print((1 &gt; 3) or (9 &lt; 2))  # False</span><br><span class="line">print(not (2 &gt; 1))  # False</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><strong>位运算符</strong></p><table><thead><tr><th>操作符</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td><code>~</code></td><td>按位取反</td><td><code>~4</code></td></tr><tr><td><code>&amp;</code></td><td>按位与</td><td><code>4 &amp; 5</code></td></tr><tr><td>`</td><td>`</td><td>按位或</td></tr><tr><td><code>^</code></td><td>按位异或</td><td><code>4 ^ 5</code></td></tr><tr><td><code>&lt;&lt;</code></td><td>左移</td><td><code>4 &lt;&lt; 2</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>右移</td><td><code>4 &gt;&gt; 2</code></td></tr></tbody></table><p>【例子】有关二进制的运算，参见“位运算”部分的讲解。</p><p>[6]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(bin(4))  # 0b100</span><br><span class="line">print(bin(5))  # 0b101</span><br><span class="line">print(bin(~4), ~4)  # -0b101 -5</span><br><span class="line">print(bin(4 &amp; 5), 4 &amp; 5)  # 0b100 4</span><br><span class="line">print(bin(4 | 5), 4 | 5)  # 0b101 5</span><br><span class="line">print(bin(4 ^ 5), 4 ^ 5)  # 0b1 1</span><br><span class="line">print(bin(4 &lt;&lt; 2), 4 &lt;&lt; 2)  # 0b10000 16</span><br><span class="line">print(bin(4 &gt;&gt; 2), 4 &gt;&gt; 2)  # 0b1 1</span><br><span class="line">0b100</span><br><span class="line">0b101</span><br><span class="line">-0b101 -5</span><br><span class="line">0b100 4</span><br><span class="line">0b101 5</span><br><span class="line">0b1 1</span><br><span class="line">0b10000 16</span><br><span class="line">0b1 1</span><br></pre></td></tr></table></figure><p><strong>三元运算符</strong></p><p>【例子】</p><p>[7]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x, y &#x3D; 4, 5</span><br><span class="line">if x &lt; y:</span><br><span class="line">    small &#x3D; x</span><br><span class="line">else:</span><br><span class="line">    small &#x3D; y</span><br><span class="line"></span><br><span class="line">print(small)  # 4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>有了这个三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。</p><p>【例子】</p><p>[8]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y &#x3D; 4, 5</span><br><span class="line">small &#x3D; x if x &lt; y else y</span><br><span class="line">print(small)  # 4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p><strong>其他运算符</strong></p><table><thead><tr><th>操作符</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td><code>in</code></td><td>存在</td><td><code>&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td></tr><tr><td><code>not in</code></td><td>不存在</td><td><code>&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td></tr><tr><td><code>is</code></td><td>是</td><td><code>&quot;hello&quot; is &quot;hello&quot;</code></td></tr><tr><td><code>not is</code></td><td>不是</td><td><code>&quot;hello&quot; is not &quot;hello&quot;</code></td></tr></tbody></table><p>【例子】</p><p>[9]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">letters &#x3D; [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</span><br><span class="line">if &#39;A&#39; in letters:</span><br><span class="line">    print(&#39;A&#39; + &#39; exists&#39;)</span><br><span class="line">if &#39;h&#39; not in letters:</span><br><span class="line">    print(&#39;h&#39; + &#39; not exists&#39;)</span><br><span class="line"></span><br><span class="line"># A exists</span><br><span class="line"># h not exists</span><br><span class="line">A exists</span><br><span class="line">h not exists</span><br></pre></td></tr></table></figure><p>【例子】比较的两个变量均指向不可变类型。</p><p>[10]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; &quot;hello&quot;</span><br><span class="line">b &#x3D; &quot;hello&quot;</span><br><span class="line">print(a is b, a &#x3D;&#x3D; b)  # True True</span><br><span class="line">print(a is not b, a !&#x3D; b)  # False False</span><br><span class="line">True True</span><br><span class="line">False False</span><br></pre></td></tr></table></figure><p>【例子】比较的两个变量均指向可变类型。</p><p>[11]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [&quot;hello&quot;]</span><br><span class="line">b &#x3D; [&quot;hello&quot;]</span><br><span class="line">print(a is b, a &#x3D;&#x3D; b)  # False True</span><br><span class="line">print(a is not b, a !&#x3D; b)  # True False</span><br><span class="line">False True</span><br><span class="line">True False</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>is, is not 对比的是两个变量的内存地址</li><li>==, != 对比的是两个变量的值</li><li>比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。</li><li>对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li></ul><p><strong>运算符的优先级</strong></p><ul><li>一元运算符优于二元运算符。例如<code>3 ** -2</code>等价于<code>3 ** (-2)</code>。</li><li>先算术运算，后移位运算，最后位运算。例如 <code>1 &lt;&lt; 3 + 2 &amp; 7</code>等价于 <code>1 &lt;&lt; (3 + 2)) &amp; 7</code>。</li><li>逻辑运算最后结合。例如<code>3 &lt; 4 and 4 &lt; 5</code>等价于<code>(3 &lt; 4) and (4 &lt; 5)</code>。</li></ul><p>【例子】</p><p>[12]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(-3 ** 2)  # -9</span><br><span class="line">print(3 ** -2)  # 0.1111111111111111</span><br><span class="line">print(1 &lt;&lt; 3 + 2 &amp; 7)  # 0</span><br><span class="line">print(-3 * 2 + 5 &#x2F; -2 - 4)  # -12.5</span><br><span class="line">print(3 &lt; 4 and 4 &lt; 5)  # True</span><br><span class="line">-9</span><br><span class="line">0.1111111111111111</span><br><span class="line">0</span><br><span class="line">-12.5</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="3-变量和赋值"><a href="#3-变量和赋值" class="headerlink" title="3. 变量和赋值"></a>3. 变量和赋值</h2><ul><li>在使用变量之前，需要对其先赋值。</li><li>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</li><li>Python 变量名是大小写敏感的，foo != Foo。</li></ul><p>【例子】</p><p>[13]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">teacher &#x3D; &quot;老马的程序人生&quot;</span><br><span class="line">print(teacher)  # 老马的程序人生</span><br><span class="line">老马的程序人生</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[14]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first &#x3D; 2</span><br><span class="line">second &#x3D; 3</span><br><span class="line">third &#x3D; first + second</span><br><span class="line">print(third)  # 5</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[15]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myTeacher &#x3D; &quot;老马的程序人生&quot;</span><br><span class="line">yourTeacher &#x3D; &quot;小马的程序人生&quot;</span><br><span class="line">ourTeacher &#x3D; myTeacher + &#39;,&#39; + yourTeacher</span><br><span class="line">print(ourTeacher)  # 老马的程序人生,小马的程序人生</span><br><span class="line">老马的程序人生,小马的程序人生</span><br></pre></td></tr></table></figure><h2 id="4-数据类型与转换"><a href="#4-数据类型与转换" class="headerlink" title="4. 数据类型与转换"></a>4. 数据类型与转换</h2><table><thead><tr><th>类型</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td>int</td><td>整型 <code>&lt;class &#39;int&#39;&gt;</code></td><td><code>-876, 10</code></td></tr><tr><td>float</td><td>浮点型<code>&lt;class &#39;float&#39;&gt;</code></td><td><code>3.149, 11.11</code></td></tr><tr><td>bool</td><td>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></td><td><code>True, False</code></td></tr></tbody></table><p><strong>整型</strong></p><p>【例子】通过 <code>print()</code> 可看出 <code>a</code> 的值，以及类 (class) 是<code>int</code>。</p><p>[16]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 1031</span><br><span class="line">print(a, type(a))</span><br><span class="line"># 1031 &lt;class &#39;int&#39;&gt;</span><br><span class="line">1031 &lt;class &#39;int&#39;&gt;</span><br></pre></td></tr></table></figure><p>Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。</p><p>【例子】</p><p>[17]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D; dir(int)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"># [&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__bool__&#39;, &#39;__ceil__&#39;, &#39;__class__&#39;,</span><br><span class="line"># &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;,</span><br><span class="line"># &#39;__float__&#39;, &#39;__floor__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;,</span><br><span class="line"># &#39;__getattribute__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;,</span><br><span class="line"># &#39;__index__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__int__&#39;, &#39;__invert__&#39;,</span><br><span class="line"># &#39;__le__&#39;, &#39;__lshift__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;,</span><br><span class="line"># &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;,</span><br><span class="line"># &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;,</span><br><span class="line"># &#39;__rfloordiv__&#39;, &#39;__rlshift__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;,</span><br><span class="line"># &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rrshift__&#39;, &#39;__rshift__&#39;, &#39;__rsub__&#39;,</span><br><span class="line"># &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;,</span><br><span class="line"># &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__trunc__&#39;, &#39;__xor__&#39;,</span><br><span class="line"># &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;,</span><br><span class="line"># &#39;numerator&#39;, &#39;real&#39;, &#39;to_bytes&#39;]</span><br><span class="line">[&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__bool__&#39;, &#39;__ceil__&#39;, &#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__float__&#39;, &#39;__floor__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__index__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__int__&#39;, &#39;__invert__&#39;, &#39;__le__&#39;, &#39;__lshift__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rlshift__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rrshift__&#39;, &#39;__rshift__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__trunc__&#39;, &#39;__xor__&#39;, &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;, &#39;numerator&#39;, &#39;real&#39;, &#39;to_bytes&#39;]</span><br></pre></td></tr></table></figure><p>对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个<code>bit_length()</code>的例子。</p><p>【例子】找到一个整数的二进制表示，再返回其长度。</p><p>[18]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 1031</span><br><span class="line">print(bin(a))  # 0b10000000111</span><br><span class="line">print(a.bit_length())  # 11</span><br><span class="line">0b10000000111</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p><strong>浮点型</strong></p><p>【例子】</p><p>[19]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">print(1, type(1))</span><br><span class="line"># 1 &lt;class &#39;int&#39;&gt;</span><br><span class="line"></span><br><span class="line">print(1., type(1.))</span><br><span class="line"># 1.0 &lt;class &#39;float&#39;&gt;</span><br><span class="line"></span><br><span class="line">a &#x3D; 0.00000023</span><br><span class="line">b &#x3D; 2.3e-7</span><br><span class="line">print(a)  # 2.3e-07</span><br><span class="line">print(b)  # 2.3e-07</span><br><span class="line">1 &lt;class &#39;int&#39;&gt;</span><br><span class="line">1.0 &lt;class &#39;float&#39;&gt;</span><br><span class="line">2.3e-07</span><br><span class="line">2.3e-07</span><br></pre></td></tr></table></figure><p>有时候我们想保留浮点型的小数点后 <code>n</code> 位。可以用 <code>decimal</code> 包里的 <code>Decimal</code> 对象和 <code>getcontext()</code> 方法来实现。</p><p>[21]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import decimal</span><br><span class="line">from decimal import Decimal</span><br></pre></td></tr></table></figure><p>Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的<code>dir(decimal)</code> 来看其属性和方法。</p><p>【例子】<code>getcontext()</code> 显示了 <code>Decimal</code> 对象的默认精度值是 28 位 (<code>prec=28</code>)。</p><p>[22]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; decimal.getcontext()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># Context(prec&#x3D;28, rounding&#x3D;ROUND_HALF_EVEN, Emin&#x3D;-999999, Emax&#x3D;999999,</span><br><span class="line"># capitals&#x3D;1, clamp&#x3D;0, flags&#x3D;[], </span><br><span class="line"># traps&#x3D;[InvalidOperation, DivisionByZero, Overflow])</span><br><span class="line">Context(prec&#x3D;28, rounding&#x3D;ROUND_HALF_EVEN, Emin&#x3D;-999999, Emax&#x3D;999999, capitals&#x3D;1, clamp&#x3D;0, flags&#x3D;[], traps&#x3D;[InvalidOperation, DivisionByZero, Overflow])</span><br></pre></td></tr></table></figure><p>[23]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D; Decimal(1) &#x2F; Decimal(3)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"># 0.3333333333333333333333333333</span><br><span class="line">0.3333333333333333333333333333</span><br></pre></td></tr></table></figure><p>【例子】使 1/3 保留 4 位，用 <code>getcontext().prec</code> 来调整精度。</p><p>[24]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">decimal.getcontext().prec &#x3D; 4</span><br><span class="line">c &#x3D; Decimal(1) &#x2F; Decimal(3)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"># 0.3333</span><br><span class="line">0.3333</span><br></pre></td></tr></table></figure><p><strong>布尔型</strong></p><p>布尔 (boolean) 型变量只能取两个值，<code>True</code> 和 <code>False</code>。当把布尔型变量用在数字运算中，用 <code>1</code> 和 <code>0</code> 代表 <code>True</code> 和 <code>False</code>。</p><p>【例子】</p><p>[25]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(True + True)  # 2</span><br><span class="line">print(True + False)  # 1</span><br><span class="line">print(True * False)  # 0</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>除了直接给变量赋值 <code>True</code> 和 <code>False</code>，还可以用 <code>bool(X)</code> 来创建变量，其中 <code>X</code> 可以是</p><ul><li>基本类型：整型、浮点型、布尔型</li><li>容器类型：字符串、元组、列表、字典和集合</li></ul><p>【例子】<code>bool</code> 作用在基本类型变量：<code>X</code> 只要不是整型 <code>0</code>、浮点型 <code>0.0</code>，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p>[26]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(type(0), bool(0), bool(1))</span><br><span class="line"># &lt;class &#39;int&#39;&gt; False True</span><br><span class="line"></span><br><span class="line">print(type(10.31), bool(0.00), bool(10.31))</span><br><span class="line"># &lt;class &#39;float&#39;&gt; False True</span><br><span class="line"></span><br><span class="line">print(type(True), bool(False), bool(True))</span><br><span class="line"># &lt;class &#39;bool&#39;&gt; False True</span><br><span class="line">&lt;class &#39;int&#39;&gt; False True</span><br><span class="line">&lt;class &#39;float&#39;&gt; False True</span><br><span class="line">&lt;class &#39;bool&#39;&gt; False True</span><br></pre></td></tr></table></figure><p>【例子】<code>bool</code> 作用在容器类型变量：<code>X</code> 只要不是空的变量，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p>[27]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">print(type(&#39;&#39;), bool(&#39;&#39;), bool(&#39;python&#39;))</span><br><span class="line"># &lt;class &#39;str&#39;&gt; False True</span><br><span class="line"></span><br><span class="line">print(type(()), bool(()), bool((10,)))</span><br><span class="line"># &lt;class &#39;tuple&#39;&gt; False True</span><br><span class="line"></span><br><span class="line">print(type([]), bool([]), bool([1, 2]))</span><br><span class="line"># &lt;class &#39;list&#39;&gt; False True</span><br><span class="line"></span><br><span class="line">print(type(&#123;&#125;), bool(&#123;&#125;), bool(&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;))</span><br><span class="line"># &lt;class &#39;dict&#39;&gt; False True</span><br><span class="line"></span><br><span class="line">print(type(set()), bool(set()), bool(&#123;1, 2&#125;))</span><br><span class="line"># &lt;class &#39;set&#39;&gt; False True</span><br><span class="line">&lt;class &#39;str&#39;&gt; False True</span><br><span class="line">&lt;class &#39;tuple&#39;&gt; False True</span><br><span class="line">&lt;class &#39;list&#39;&gt; False True</span><br><span class="line">&lt;class &#39;dict&#39;&gt; False True</span><br><span class="line">&lt;class &#39;set&#39;&gt; False True</span><br></pre></td></tr></table></figure><p>确定<code>bool(X)</code> 的值是 <code>True</code> 还是 <code>False</code>，就看 <code>X</code> 是不是空，空的话就是 <code>False</code>，不空的话就是 <code>True</code>。</p><ul><li>对于数值变量，<code>0</code>, <code>0.0</code> 都可认为是空的。</li><li>对于容器变量，里面没元素就是空的。</li></ul><p><strong>获取类型信息</strong></p><ul><li>获取类型信息 <code>type(object)</code></li></ul><p>【例子】</p><p>[28]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance(1, int))  # True</span><br><span class="line">print(isinstance(5.2, float))  # True</span><br><span class="line">print(isinstance(True, bool))  # True</span><br><span class="line">print(isinstance(&#39;5.2&#39;, str))  # True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>type()</code> 不会认为子类是一种父类类型，不考虑继承关系。</li><li><code>isinstance()</code> 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code>。</p><p><strong>类型转换</strong></p><ul><li>转换为整型 <code>int(x, base=10)</code></li><li>转换为字符串 <code>str(object=&#39;&#39;)</code></li><li>转换为浮点型 <code>float(x)</code></li></ul><p>【例子】</p><p>[29]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(int(&#39;520&#39;))  # 520</span><br><span class="line">print(int(520.52))  # 520</span><br><span class="line">print(float(&#39;520.52&#39;))  # 520.52</span><br><span class="line">print(float(520))  # 520.0</span><br><span class="line">print(str(10 + 10))  # 20</span><br><span class="line">print(str(10.1 + 5.2))  # 15.3</span><br><span class="line">520</span><br><span class="line">520</span><br><span class="line">520.52</span><br><span class="line">520.0</span><br><span class="line">20</span><br><span class="line">15.3</span><br></pre></td></tr></table></figure><h2 id="5-print-函数"><a href="#5-print-函数" class="headerlink" title="5. print() 函数"></a>5. print() 函数</h2><p>[ ]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*objects, sep&#x3D;&#39; &#39;, end&#x3D;&#39;\n&#39;, file&#x3D;sys.stdout, flush&#x3D;False)</span><br></pre></td></tr></table></figure><ul><li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按<code>str()</code>方式进行转换为字符串输出；</li><li>关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li><li>关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\n</code>；</li><li>关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li><li>关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li></ul><p>【例子】没有参数时，每次输出后都会换行。</p><p>[31]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shoplist &#x3D; [&#39;apple&#39;, &#39;mango&#39;, &#39;carrot&#39;, &#39;banana&#39;]</span><br><span class="line">print(&quot;This is printed without &#39;end&#39;and &#39;sep&#39;.&quot;)</span><br><span class="line">for item in shoplist:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"># This is printed without &#39;end&#39;and &#39;sep&#39;.</span><br><span class="line"># apple</span><br><span class="line"># mango</span><br><span class="line"># carrot</span><br><span class="line"># banana</span><br><span class="line">This is printed without &#39;end&#39;and &#39;sep&#39;.</span><br><span class="line">apple</span><br><span class="line">mango</span><br><span class="line">carrot</span><br><span class="line">banana</span><br></pre></td></tr></table></figure><p>【例子】每次输出结束都用<code>end</code>设置的参数<code>&amp;</code>结尾，并没有默认换行。</p><p>[32]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shoplist &#x3D; [&#39;apple&#39;, &#39;mango&#39;, &#39;carrot&#39;, &#39;banana&#39;]</span><br><span class="line">print(&quot;This is printed with &#39;end&#x3D;&#39;&amp;&#39;&#39;.&quot;)</span><br><span class="line">for item in shoplist:</span><br><span class="line">    print(item, end&#x3D;&#39;&amp;&#39;)</span><br><span class="line">print(&#39;hello world&#39;)</span><br><span class="line"></span><br><span class="line"># This is printed with &#39;end&#x3D;&#39;&amp;&#39;&#39;.</span><br><span class="line"># apple&amp;mango&amp;carrot&amp;banana&amp;hello world</span><br><span class="line">This is printed with &#39;end&#x3D;&#39;&amp;&#39;&#39;.</span><br><span class="line">apple&amp;mango&amp;carrot&amp;banana&amp;hello world</span><br></pre></td></tr></table></figure><p>【例子】<code>item</code>值与<code>&#39;another string&#39;</code>两个值之间用<code>sep</code>设置的参数<code>&amp;</code>分割。由于<code>end</code>参数没有设置，因此默认是输出解释后换行，即<code>end</code>参数的默认值为<code>\n</code>。</p><p>[33]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shoplist &#x3D; [&#39;apple&#39;, &#39;mango&#39;, &#39;carrot&#39;, &#39;banana&#39;]</span><br><span class="line">print(&quot;This is printed with &#39;sep&#x3D;&#39;&amp;&#39;&#39;.&quot;)</span><br><span class="line">for item in shoplist:</span><br><span class="line">    print(item, &#39;another string&#39;, sep&#x3D;&#39;&amp;&#39;)</span><br><span class="line"></span><br><span class="line"># This is printed with &#39;sep&#x3D;&#39;&amp;&#39;&#39;.</span><br><span class="line"># apple&amp;another string</span><br><span class="line"># mango&amp;another string</span><br><span class="line"># carrot&amp;another string</span><br><span class="line"># banana&amp;another string</span><br><span class="line">This is printed with &#39;sep&#x3D;&#39;&amp;&#39;&#39;.</span><br><span class="line">apple&amp;another string</span><br><span class="line">mango&amp;another string</span><br><span class="line">carrot&amp;another string</span><br><span class="line">banana&amp;another string</span><br></pre></td></tr></table></figure><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="1-原码、反码和补码"><a href="#1-原码、反码和补码" class="headerlink" title="1. 原码、反码和补码"></a>1. 原码、反码和补码</h2><p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p><p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 11 -&gt; 3</span><br><span class="line">10 00 00 11 -&gt; -3</span><br></pre></td></tr></table></figure><p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 11 -&gt; 3</span><br><span class="line">11 11 11 00 -&gt; -3</span><br></pre></td></tr></table></figure><p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 11 -&gt; 3</span><br><span class="line">11 11 11 01 -&gt; -3</span><br></pre></td></tr></table></figure><p><strong>符号位</strong>：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p><h2 id="2-按位运算"><a href="#2-按位运算" class="headerlink" title="2. 按位运算"></a>2. 按位运算</h2><ul><li>按位非操作 ~</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">~ <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>~</code> 把<code>num</code>的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 <code>~</code> 运算中同样会取反。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line">11 11 10 10 -&gt; -6</span><br><span class="line"></span><br><span class="line">11 11 10 11 -&gt; -5</span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line">00 00 01 00 -&gt; 4</span><br></pre></td></tr></table></figure><ul><li>按位与操作 &amp;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &amp; <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只有两个对应位都为 1 时才为 1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">&amp;</span><br><span class="line">00 00 01 10 -&gt; 6</span><br><span class="line">---</span><br><span class="line">00 00 01 00 -&gt; 4</span><br></pre></td></tr></table></figure><ul><li>按位或操作 |</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> | <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> | <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只要两个对应位中有一个 1 时就为 1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">|</span><br><span class="line">00 00 01 10 -&gt; 6</span><br><span class="line">---</span><br><span class="line">00 00 01 11 -&gt; 7</span><br></pre></td></tr></table></figure><ul><li>按位异或操作 ^</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只有两个对应位不同时才为 1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">^</span><br><span class="line">00 00 01 10 -&gt; 6</span><br><span class="line">---</span><br><span class="line">00 00 00 11 -&gt; 3</span><br></pre></td></tr></table></figure><p>异或操作的性质：满足交换律和结合律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line">B: <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^B: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">B^A: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^A: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">A^<span class="number">0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">A^B^A: = A^A^B = B = <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><ul><li>按位左移操作 &lt;&lt;</li></ul><p><code>num &lt;&lt; i</code> 将<code>num</code>的二进制表示向左移动<code>i</code>位所得的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00 00 10 11 -&gt; 11</span><br><span class="line"><span class="number">11</span> &lt;&lt; <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">01 01 10 00 -&gt; 88</span><br></pre></td></tr></table></figure><ul><li>按位右移操作 &gt;&gt;</li></ul><p><code>num &gt;&gt; i</code> 将<code>num</code>的二进制表示向右移动<code>i</code>位所得的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00 00 10 11 -&gt; 11</span><br><span class="line"><span class="number">11</span> &gt;&gt; <span class="number">2</span></span><br><span class="line">---</span><br><span class="line">00 00 00 10 -&gt; 2</span><br></pre></td></tr></table></figure><h2 id="3-利用位运算实现快速计算"><a href="#3-利用位运算实现快速计算" class="headerlink" title="3. 利用位运算实现快速计算"></a>3. 利用位运算实现快速计算</h2><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; 1 -&gt; 计算 n*2</span><br><span class="line">n &gt;&gt; 1 -&gt; 计算 n/2，负奇数的运算不可用</span><br><span class="line">n &lt;&lt; m -&gt; 计算 n*(2^m)，即乘以 2 的 m 次方</span><br><span class="line">n &gt;&gt; m -&gt; 计算 n/(2^m)，即除以 2 的 m 次方</span><br><span class="line">1 &lt;&lt; n -&gt; 2^n</span><br></pre></td></tr></table></figure><p>通过 <code>^</code> 快速交换两个整数。 通过 <code>^</code> 快速交换两个整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br></pre></td></tr></table></figure><p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00 00 01 01 -&gt; 5</span><br><span class="line">&amp;</span><br><span class="line">11 11 10 11 -&gt; -5</span><br><span class="line">---</span><br><span class="line">00 00 00 01 -&gt; 1</span><br><span class="line"></span><br><span class="line">00 00 11 10 -&gt; 14</span><br><span class="line">&amp;</span><br><span class="line">11 11 00 10 -&gt; -14</span><br><span class="line">---</span><br><span class="line">00 00 00 10 -&gt; 2</span><br></pre></td></tr></table></figure><h2 id="4-利用位运算实现整数集合"><a href="#4-利用位运算实现整数集合" class="headerlink" title="4. 利用位运算实现整数集合"></a>4. 利用位运算实现整数集合</h2><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p><p>比如集合 <code>{1, 3, 4, 8}</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p><p>元素与集合的操作：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a | (1&lt;&lt;i)  -&gt; 把 i 插入到集合中</span><br><span class="line">a &amp; ~(1&lt;&lt;i) -&gt; 把 i 从集合中删除</span><br><span class="line">a &amp; (1&lt;&lt;i)  -&gt; 判断 i 是否属于该集合（零不属于，非零属于）</span><br></pre></td></tr></table></figure><p>集合之间的操作：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a 补   -&gt; ~a</span><br><span class="line">a 交 b -&gt; a &amp; b</span><br><span class="line">a 并 b -&gt; a | b</span><br><span class="line">a 差 b -&gt; a &amp; (~b)</span><br></pre></td></tr></table></figure><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p><p>【例子】C#语言输出负数。</p><p>[ ]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        string s1 &#x3D; Convert.ToString(-3, 2);</span><br><span class="line">        Console.WriteLine(s1); </span><br><span class="line">        &#x2F;&#x2F; 11111111111111111111111111111101</span><br><span class="line">        </span><br><span class="line">        string s2 &#x3D; Convert.ToString(-3, 16);</span><br><span class="line">        Console.WriteLine(s2); </span><br><span class="line">        &#x2F;&#x2F; fffffffd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【例子】 Python 的<code>bin()</code> 输出。</p><p>[37]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(bin(3))  # 0b11</span><br><span class="line">print(bin(-3))  # -0b11</span><br><span class="line"></span><br><span class="line">print(bin(-3 &amp; 0xffffffff))  </span><br><span class="line"># 0b11111111111111111111111111111101</span><br><span class="line"></span><br><span class="line">print(bin(0xfffffffd))       </span><br><span class="line"># 0b11111111111111111111111111111101</span><br><span class="line"></span><br><span class="line">print(0xfffffffd)  # 4294967293</span><br><span class="line">0b11</span><br><span class="line">-0b11</span><br><span class="line">0b11111111111111111111111111111101</span><br><span class="line">0b11111111111111111111111111111101</span><br><span class="line">4294967293</span><br></pre></td></tr></table></figure><p>是不是很颠覆认知，我们从结果可以看出：</p><ul><li>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</li><li>Python中的整型是补码形式存储的。</li><li>Python中整型是不限制长度的不会超范围溢出。</li></ul><p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数<code>0xffffffff</code>进行按位与操作，再交给<code>bin()</code>进行输出，得到的才是负数的补码表示。</p><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. if 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    expr_true_suite</span><br></pre></td></tr></table></figure><ul><li>if 语句的 <code>expr_true_suite</code> 代码块只有当条件表达式 <code>expression</code> 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</li><li>单个 if 语句中的 <code>expression</code> 条件表达式可以通过布尔操作符 <code>and</code>，<code>or</code>和<code>not</code> 实现多重条件判断。</li></ul><p>【例子】</p><p>[38]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 2 &gt; 1 and not 2 &gt; 3:</span><br><span class="line">    print(&#39;Correct Judgement!&#39;)</span><br><span class="line"></span><br><span class="line"># Correct Judgement!</span><br><span class="line">Correct Judgement!</span><br></pre></td></tr></table></figure><h2 id="2-if-else-语句"><a href="#2-if-else-语句" class="headerlink" title="2. if - else 语句"></a>2. if - else 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    expr_true_suite</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    expr_false_suite</span><br></pre></td></tr></table></figure><ul><li>Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。</li></ul><p>【例子】</p><p>[39]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">temp &#x3D; input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)</span><br><span class="line">guess &#x3D; int(temp) # input 函数将接收的任何数据类型都默认为 str。</span><br><span class="line">if guess &#x3D;&#x3D; 666:</span><br><span class="line">    print(&quot;你太了解小姐姐的心思了！&quot;)</span><br><span class="line">    print(&quot;哼，猜对也没有奖励！&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;猜错了，小姐姐现在心里想的是666！&quot;)</span><br><span class="line">print(&quot;游戏结束，不玩儿啦！&quot;)</span><br><span class="line">猜一猜小姐姐想的是哪个数字？666</span><br><span class="line">你太了解小姐姐的心思了！</span><br><span class="line">哼，猜对也没有奖励！</span><br><span class="line">游戏结束，不玩儿啦！</span><br></pre></td></tr></table></figure><p><code>if</code>语句支持嵌套，即在一个<code>if</code>语句中嵌入另一个<code>if</code>语句，从而构成不同层次的选择结构。</p><p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意<code>else</code>的悬挂问题。</p><p>[40]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hi &#x3D; 6</span><br><span class="line">if hi &gt; 2:</span><br><span class="line">    if hi &gt; 7:</span><br><span class="line">        print(&#39;好棒!好棒!&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;切~&#39;)</span><br><span class="line"></span><br><span class="line"># 无输出</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[41]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">temp &#x3D; input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)</span><br><span class="line">guess &#x3D; int(temp)</span><br><span class="line">if guess &gt; 8:</span><br><span class="line">    print(&quot;大了，大了&quot;)</span><br><span class="line">else:</span><br><span class="line">    if guess &#x3D;&#x3D; 8:</span><br><span class="line">        print(&quot;你太了解小姐姐的心思了！&quot;)</span><br><span class="line">        print(&quot;哼，猜对也没有奖励！&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;小了，小了&quot;)</span><br><span class="line">print(&quot;游戏结束，不玩儿啦！&quot;)</span><br><span class="line">猜一猜小姐姐想的是哪个数字？8</span><br><span class="line">你太了解小姐姐的心思了！</span><br><span class="line">哼，猜对也没有奖励！</span><br><span class="line">游戏结束，不玩儿啦！</span><br></pre></td></tr></table></figure><h2 id="3-if-elif-else-语句"><a href="#3-if-elif-else-语句" class="headerlink" title="3. if - elif - else 语句"></a>3. if - elif - else 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression1:</span><br><span class="line">    expr1_true_suite</span><br><span class="line"><span class="keyword">elif</span> expression2:</span><br><span class="line">    expr2_true_suite</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="keyword">elif</span> expressionN:</span><br><span class="line">    exprN_true_suite</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    expr_false_suite</span><br></pre></td></tr></table></figure><ul><li>elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</li></ul><p>【例子】</p><p>[42]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">temp &#x3D; input(&#39;请输入成绩:&#39;)</span><br><span class="line">source &#x3D; int(temp)</span><br><span class="line">if 100 &gt;&#x3D; source &gt;&#x3D; 90:</span><br><span class="line">    print(&#39;A&#39;)</span><br><span class="line">elif 90 &gt; source &gt;&#x3D; 80:</span><br><span class="line">    print(&#39;B&#39;)</span><br><span class="line">elif 80 &gt; source &gt;&#x3D; 60:</span><br><span class="line">    print(&#39;C&#39;)</span><br><span class="line">elif 60 &gt; source &gt;&#x3D; 0:</span><br><span class="line">    print(&#39;D&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;输入错误！&#39;)</span><br><span class="line">请输入成绩:99</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h2 id="4-assert-关键词"><a href="#4-assert-关键词" class="headerlink" title="4. assert 关键词"></a>4. assert 关键词</h2><ul><li><code>assert</code>这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出<code>AssertionError</code>的异常。</li></ul><p>【例子】</p><p>[ ]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_list &#x3D; [&#39;lsgogroup&#39;]</span><br><span class="line">my_list.pop(0)</span><br><span class="line">assert len(my_list) &gt; 0</span><br><span class="line"></span><br><span class="line"># AssertionError</span><br></pre></td></tr></table></figure><p>【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。</p><p>[ ]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert 3 &gt; 7</span><br><span class="line"></span><br><span class="line"># AssertionError</span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1. while 循环"></a>1. while 循环</h2><p><code>while</code>语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于<code>while</code>代码块的缩进语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 布尔表达式:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p><code>while</code>循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</p><p>如果布尔表达式不带有<code>&lt;、&gt;、==、！=、in、not in</code>等运算符，仅仅给出数值之类的条件，也是可以的。当<code>while</code>后写入一个非零整数时，视为真值，执行循环体；写入<code>0</code>时，视为假值，不执行循环体。也可以写入<code>str、list</code>或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p><p>【例子】</p><p>[44]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">count &#x3D; 0</span><br><span class="line">while count &lt; 3:</span><br><span class="line">    temp &#x3D; input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)</span><br><span class="line">    guess &#x3D; int(temp)</span><br><span class="line">    if guess &gt; 8:</span><br><span class="line">        print(&quot;大了，大了&quot;)</span><br><span class="line">    else:</span><br><span class="line">        if guess &#x3D;&#x3D; 8:</span><br><span class="line">            print(&quot;你太了解小姐姐的心思了！&quot;)</span><br><span class="line">            print(&quot;哼，猜对也没有奖励！&quot;)</span><br><span class="line">            count &#x3D; 3</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;小了，小了&quot;)</span><br><span class="line">    count &#x3D; count + 1</span><br><span class="line">print(&quot;游戏结束，不玩儿啦！&quot;)</span><br><span class="line">猜一猜小姐姐想的是哪个数字？8</span><br><span class="line">你太了解小姐姐的心思了！</span><br><span class="line">哼，猜对也没有奖励！</span><br><span class="line">游戏结束，不玩儿啦！</span><br></pre></td></tr></table></figure><p>【例子】布尔表达式返回0，循环终止。</p><p>[45]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string &#x3D; &#39;abcd&#39;</span><br><span class="line">while string:</span><br><span class="line">    print(string)</span><br><span class="line">    string &#x3D; string[1:]</span><br><span class="line"></span><br><span class="line"># abcd</span><br><span class="line"># bcd</span><br><span class="line"># cd</span><br><span class="line"># d</span><br><span class="line">abcd</span><br><span class="line">bcd</span><br><span class="line">cd</span><br><span class="line">d</span><br></pre></td></tr></table></figure><hr><h2 id="2-while-else-循环"><a href="#2-while-else-循环" class="headerlink" title="2. while - else 循环"></a>2. while - else 循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 布尔表达式:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>当<code>while</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>while</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容。</p><p>【例子】</p><p>[46]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">count &#x3D; 0</span><br><span class="line">while count &lt; 5:</span><br><span class="line">    print(&quot;%d is  less than 5&quot; % count)</span><br><span class="line">    count &#x3D; count + 1</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%d is not less than 5&quot; % count)</span><br><span class="line">    </span><br><span class="line"># 0 is  less than 5</span><br><span class="line"># 1 is  less than 5</span><br><span class="line"># 2 is  less than 5</span><br><span class="line"># 3 is  less than 5</span><br><span class="line"># 4 is  less than 5</span><br><span class="line"># 5 is not less than 5</span><br><span class="line">0 is  less than 5</span><br><span class="line">1 is  less than 5</span><br><span class="line">2 is  less than 5</span><br><span class="line">3 is  less than 5</span><br><span class="line">4 is  less than 5</span><br><span class="line">5 is not less than 5</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[47]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">count &#x3D; 0</span><br><span class="line">while count &lt; 5:</span><br><span class="line">    print(&quot;%d is  less than 5&quot; % count)</span><br><span class="line">    count &#x3D; 6</span><br><span class="line">    break</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%d is not less than 5&quot; % count)</span><br><span class="line"></span><br><span class="line"># 0 is  less than 5</span><br><span class="line">0 is  less than 5</span><br></pre></td></tr></table></figure><hr><h2 id="3-for-循环"><a href="#3-for-循环" class="headerlink" title="3. for 循环"></a>3. for 循环</h2><p><code>for</code>循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如<code>str、list、tuple</code>等，也可以遍历任何可迭代对象，如<code>dict</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</p><p>【例子】</p><p>[48]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in &#39;ILoveLSGO&#39;:</span><br><span class="line">    print(i, end&#x3D;&#39; &#39;)  # 不换行输出</span><br><span class="line"></span><br><span class="line"># I L o v e L S G O</span><br><span class="line">I L o v e L S G O</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[49]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">member &#x3D; [&#39;张三&#39;, &#39;李四&#39;, &#39;刘德华&#39;, &#39;刘六&#39;, &#39;周润发&#39;]</span><br><span class="line">for each in member:</span><br><span class="line">    print(each)</span><br><span class="line"></span><br><span class="line"># 张三</span><br><span class="line"># 李四</span><br><span class="line"># 刘德华</span><br><span class="line"># 刘六</span><br><span class="line"># 周润发</span><br><span class="line"></span><br><span class="line">for i in range(len(member)):</span><br><span class="line">    print(member[i])</span><br><span class="line"></span><br><span class="line"># 张三</span><br><span class="line"># 李四</span><br><span class="line"># 刘德华</span><br><span class="line"># 刘六</span><br><span class="line"># 周润发</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">刘德华</span><br><span class="line">刘六</span><br><span class="line">周润发</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">刘德华</span><br><span class="line">刘六</span><br><span class="line">周润发</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[50]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line"></span><br><span class="line">for key, value in dic.items():</span><br><span class="line">    print(key, value, sep&#x3D;&#39;:&#39;, end&#x3D;&#39; &#39;)</span><br><span class="line">    </span><br><span class="line"># a:1 b:2 c:3 d:4 </span><br><span class="line">a:1 b:2 c:3 d:4</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[51]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line"></span><br><span class="line">for key in dic.keys():</span><br><span class="line">    print(key, end&#x3D;&#39; &#39;)</span><br><span class="line">    </span><br><span class="line"># a b c d </span><br><span class="line">a b c d</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[52]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line"></span><br><span class="line">for value in dic.values():</span><br><span class="line">    print(value, end&#x3D;&#39; &#39;)</span><br><span class="line">    </span><br><span class="line"># 1 2 3 4</span><br><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><hr><h2 id="4-for-else-循环"><a href="#4-for-else-循环" class="headerlink" title="4. for - else 循环"></a>4. for - else 循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p><p>【例子】</p><p>[53]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">for num in range(10, 20):  # 迭代 10 到 20 之间的数字</span><br><span class="line">    for i in range(2, num):  # 根据因子迭代</span><br><span class="line">        if num % i &#x3D;&#x3D; 0:  # 确定第一个因子</span><br><span class="line">            j &#x3D; num &#x2F; i  # 计算第二个因子</span><br><span class="line">            print(&#39;%d 等于 %d * %d&#39; % (num, i, j))</span><br><span class="line">            break  # 跳出当前循环</span><br><span class="line">    else:  # 循环的 else 部分</span><br><span class="line">        print(num, &#39;是一个质数&#39;)</span><br><span class="line"></span><br><span class="line"># 10 等于 2 * 5</span><br><span class="line"># 11 是一个质数</span><br><span class="line"># 12 等于 2 * 6</span><br><span class="line"># 13 是一个质数</span><br><span class="line"># 14 等于 2 * 7</span><br><span class="line"># 15 等于 3 * 5</span><br><span class="line"># 16 等于 2 * 8</span><br><span class="line"># 17 是一个质数</span><br><span class="line"># 18 等于 2 * 9</span><br><span class="line"># 19 是一个质数</span><br><span class="line">10 等于 2 * 5</span><br><span class="line">11 是一个质数</span><br><span class="line">12 等于 2 * 6</span><br><span class="line">13 是一个质数</span><br><span class="line">14 等于 2 * 7</span><br><span class="line">15 等于 3 * 5</span><br><span class="line">16 等于 2 * 8</span><br><span class="line">17 是一个质数</span><br><span class="line">18 等于 2 * 9</span><br><span class="line">19 是一个质数</span><br></pre></td></tr></table></figure><hr><h2 id="5-range-函数"><a href="#5-range-函数" class="headerlink" title="5. range() 函数"></a>5. range() 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range([start,] stop[, step=<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li><li><code>step=1</code> 表示第三个参数的默认值是1。</li><li><code>range</code> 这个BIF的作用是生成一个从<code>start</code>参数的值开始到<code>stop</code>参数的值结束的数字序列，该序列包含<code>start</code>的值但不包含<code>stop</code>的值。</li></ul><p>【例子】</p><p>[54]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for i in range(2, 9):  # 不包含9</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># 2</span><br><span class="line"># 3</span><br><span class="line"># 4</span><br><span class="line"># 5</span><br><span class="line"># 6</span><br><span class="line"># 7</span><br><span class="line"># 8</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[55]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, 10, 2):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># 1</span><br><span class="line"># 3</span><br><span class="line"># 5</span><br><span class="line"># 7</span><br><span class="line"># 9</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><hr><h2 id="6-enumerate-函数"><a href="#6-enumerate-函数" class="headerlink" title="6. enumerate()函数"></a>6. enumerate()函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enumerate(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li>sequence：一个序列、迭代器或其他支持迭代对象。</li><li>start：下标起始位置。</li><li>返回 enumerate(枚举) 对象</li></ul><p>【例子】</p><p>[56]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seasons &#x3D; [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]</span><br><span class="line">lst &#x3D; list(enumerate(seasons))</span><br><span class="line">print(lst)</span><br><span class="line"># [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]</span><br><span class="line">lst &#x3D; list(enumerate(seasons, start&#x3D;1))  # 下标从 1 开始</span><br><span class="line">print(lst)</span><br><span class="line"># [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]</span><br><span class="line">[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]</span><br><span class="line">[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]</span><br></pre></td></tr></table></figure><p><code>enumerate()</code>与 for 循环的结合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, a <span class="keyword">in</span> enumerate(A)</span><br><span class="line">    do something <span class="keyword">with</span> a</span><br></pre></td></tr></table></figure><p>用 <code>enumerate(A)</code> 不仅返回了 <code>A</code> 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 <code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code>。</p><p>【例子】</p><p>[57]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">languages &#x3D; [&#39;Python&#39;, &#39;R&#39;, &#39;Matlab&#39;, &#39;C++&#39;]</span><br><span class="line">for language in languages:</span><br><span class="line">    print(&#39;I love&#39;, language)</span><br><span class="line">print(&#39;Done!&#39;)</span><br><span class="line"># I love Python</span><br><span class="line"># I love R</span><br><span class="line"># I love Matlab</span><br><span class="line"># I love C++</span><br><span class="line"># Done!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i, language in enumerate(languages, 2):</span><br><span class="line">    print(i, &#39;I love&#39;, language)</span><br><span class="line">print(&#39;Done!&#39;)</span><br><span class="line"># 2 I love Python</span><br><span class="line"># 3 I love R</span><br><span class="line"># 4 I love Matlab</span><br><span class="line"># 5 I love C++</span><br><span class="line"># Done!</span><br><span class="line">I love Python</span><br><span class="line">I love R</span><br><span class="line">I love Matlab</span><br><span class="line">I love C++</span><br><span class="line">Done!</span><br><span class="line">2 I love Python</span><br><span class="line">3 I love R</span><br><span class="line">4 I love Matlab</span><br><span class="line">5 I love C++</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure><hr><h2 id="7-break-语句"><a href="#7-break-语句" class="headerlink" title="7. break 语句"></a>7. break 语句</h2><p><code>break</code>语句可以跳出当前所在层的循环。</p><p>【例子】</p><p>[59]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">secret &#x3D; random.randint(1, 10) #[1,10]之间的随机数</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    temp &#x3D; input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)</span><br><span class="line">    guess &#x3D; int(temp)</span><br><span class="line">    if guess &gt; secret:</span><br><span class="line">        print(&quot;大了，大了&quot;)</span><br><span class="line">    else:</span><br><span class="line">        if guess &#x3D;&#x3D; secret:</span><br><span class="line">            print(&quot;你太了解小姐姐的心思了！&quot;)</span><br><span class="line">            print(&quot;哼，猜对也没有奖励！&quot;)</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;小了，小了&quot;)</span><br><span class="line">print(&quot;游戏结束，不玩儿啦！&quot;)</span><br><span class="line">猜一猜小姐姐想的是哪个数字？8</span><br><span class="line">你太了解小姐姐的心思了！</span><br><span class="line">哼，猜对也没有奖励！</span><br><span class="line">游戏结束，不玩儿啦！</span><br></pre></td></tr></table></figure><hr><h2 id="8-continue-语句"><a href="#8-continue-语句" class="headerlink" title="8. continue 语句"></a>8. continue 语句</h2><p><code>continue</code>终止本轮循环并开始下一轮循环。</p><p>【例子】</p><p>[60]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    if i % 2 !&#x3D; 0:</span><br><span class="line">        print(i)</span><br><span class="line">        continue</span><br><span class="line">    i +&#x3D; 2</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># 2</span><br><span class="line"># 1</span><br><span class="line"># 4</span><br><span class="line"># 3</span><br><span class="line"># 6</span><br><span class="line"># 5</span><br><span class="line"># 8</span><br><span class="line"># 7</span><br><span class="line"># 10</span><br><span class="line"># 9</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">10</span><br><span class="line">9</span><br></pre></td></tr></table></figure><hr><h2 id="9-pass-语句"><a href="#9-pass-语句" class="headerlink" title="9. pass 语句"></a>9. pass 语句</h2><p><code>pass</code> 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 <code>pass</code> 语句就是用来解决这些问题的。</p><p>【例子】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_func</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SyntaxError: unexpected EOF while parsing</span></span><br></pre></td></tr></table></figure><p>【例子】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>pass</code>是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管<code>pass</code>语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个<code>pass</code>语句，让代码可以正常运行。</p><hr><h2 id="10-推导式"><a href="#10-推导式" class="headerlink" title="10. 推导式"></a>10. 推导式</h2><p><strong>列表推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] ]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[61]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [-4, -2, 0, 2, 4]</span><br><span class="line">y &#x3D; [a * 2 for a in x]</span><br><span class="line">print(y)</span><br><span class="line"># [-8, -4, 0, 4, 8]</span><br><span class="line">[-8, -4, 0, 4, 8]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[63]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [i ** 2 for i in range(1, 10)]</span><br><span class="line">print(x)</span><br><span class="line"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[64]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [(i, i ** 2) for i in range(6)]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"># [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span><br><span class="line">[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[65]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [i for i in range(100) if (i % 2) !&#x3D; 0 and (i % 3) &#x3D;&#x3D; 0]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"># [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]</span><br><span class="line">[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[66]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [(i, j) for i in range(0, 3) for j in range(0, 3)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><br><span class="line">[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[67]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; [[i, j] for i in range(0, 3) for j in range(0, 3)]</span><br><span class="line">print(x)</span><br><span class="line"># [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span><br><span class="line"></span><br><span class="line">x[0][0] &#x3D; 10</span><br><span class="line">print(x)</span><br><span class="line"># [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span><br><span class="line">[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span><br><span class="line">[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[68]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [(i, j) for i in range(0, 3) if i &lt; 1 for j in range(0, 3) if j &gt; 1]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># [(0, 2)]</span><br><span class="line">[(0, 2)]</span><br></pre></td></tr></table></figure><p><strong>元组推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] )</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[69]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; (x for x in range(10))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"># &lt;generator object &lt;genexpr&gt; at 0x0000025BE511CC48&gt;</span><br><span class="line"></span><br><span class="line">print(tuple(a))</span><br><span class="line"></span><br><span class="line"># (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x0000014CEC2E28B8&gt;</span><br><span class="line">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></table></figure><p><strong>字典推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] &#125;</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[70]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D; &#123;i: i % 2 &#x3D;&#x3D; 0 for i in range(10) if i % 3 &#x3D;&#x3D; 0&#125;</span><br><span class="line">print(b)</span><br><span class="line"># &#123;0: True, 3: False, 6: True, 9: False&#125;</span><br><span class="line">&#123;0: True, 3: False, 6: True, 9: False&#125;</span><br></pre></td></tr></table></figure><p><strong>集合推导式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; expr for value in collection [if condition] &#125;</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[71]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c &#x3D; &#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&#125;</span><br><span class="line">print(c)</span><br><span class="line"># &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure><p><strong>其它</strong></p><ul><li><code>next(iterator[, default])</code> Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.</li></ul><p>【例子】</p><p>[72]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">e &#x3D; (i for i in range(10))</span><br><span class="line">print(e)</span><br><span class="line"># &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;</span><br><span class="line"></span><br><span class="line">print(next(e))  # 0</span><br><span class="line">print(next(e))  # 1</span><br><span class="line"></span><br><span class="line">for each in e:</span><br><span class="line">    print(each, end&#x3D;&#39; &#39;)</span><br><span class="line"></span><br><span class="line"># 2 3 4 5 6 7 8 9</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x0000014CEC389C78&gt;</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[73]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; sum([i for i in range(101)])</span><br><span class="line">print(s)  # 5050</span><br><span class="line">s &#x3D; sum((i for i in range(101)))</span><br><span class="line">print(s)  # 5050</span><br><span class="line">5050</span><br><span class="line">5050</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。</p><h2 id="1-Python-标准异常总结"><a href="#1-Python-标准异常总结" class="headerlink" title="1. Python 标准异常总结"></a>1. Python 标准异常总结</h2><ul><li>BaseException：所有异常的 <strong>基类</strong></li><li>Exception：常规异常的 <strong>基类</strong></li><li>StandardError：所有的内建标准异常的基类</li><li>ArithmeticError：所有数值计算异常的基类</li><li>FloatingPointError：浮点计算异常</li><li>OverflowError：数值运算超出最大限制</li><li>ZeroDivisionError：除数为零</li><li>AssertionError：断言语句（assert）失败</li><li>AttributeError：尝试访问未知的对象属性</li><li>EOFError：没有内建输入，到达EOF标记</li><li>EnvironmentError：操作系统异常的基类</li><li>IOError：输入/输出操作失败</li><li>OSError：操作系统产生的异常（例如打开一个不存在的文件）</li><li>WindowsError：系统调用失败</li><li>ImportError：导入模块失败的时候</li><li>KeyboardInterrupt：用户中断执行</li><li>LookupError：无效数据查询的基类</li><li>IndexError：索引超出序列的范围</li><li>KeyError：字典中查找一个不存在的关键字</li><li>MemoryError：内存溢出（可通过删除对象释放内存）</li><li>NameError：尝试访问一个不存在的变量</li><li>UnboundLocalError：访问未初始化的本地变量</li><li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>RuntimeError：一般的运行时异常</li><li>NotImplementedError：尚未实现的方法</li><li>SyntaxError：语法错误导致的异常</li><li>IndentationError：缩进错误导致的异常</li><li>TabError：Tab和空格混用</li><li>SystemError：一般的解释器系统异常</li><li>TypeError：不同类型间的无效操作</li><li>ValueError：传入无效的参数</li><li>UnicodeError：Unicode相关的异常</li><li>UnicodeDecodeError：Unicode解码时的异常</li><li>UnicodeEncodeError：Unicode编码错误导致的异常</li><li>UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><p>异常体系内部有层次关系，Python异常体系中的部分关系如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20200710131404548.png" alt="Image"></p><hr><h2 id="2-Python标准警告总结"><a href="#2-Python标准警告总结" class="headerlink" title="2. Python标准警告总结"></a>2. Python标准警告总结</h2><ul><li>Warning：警告的基类</li><li>DeprecationWarning：关于被弃用的特征的警告</li><li>FutureWarning：关于构造将来语义会有改变的警告</li><li>UserWarning：用户代码生成的警告</li><li>PendingDeprecationWarning：关于特性将会被废弃的警告</li><li>RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li><li>SyntaxWarning：可疑语法的警告</li><li>ImportWarning：用于在导入模块过程中触发的警告</li><li>UnicodeWarning：与Unicode相关的警告</li><li>BytesWarning：与字节或字节码相关的警告</li><li>ResourceWarning：与资源使用相关的警告</li></ul><hr><h2 id="3-try-except-语句"><a href="#3-try-except-语句" class="headerlink" title="3. try - except 语句"></a>3. try - except 语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span> Exception[<span class="keyword">as</span> reason]:</span><br><span class="line">    出现异常后的处理代码</span><br></pre></td></tr></table></figure><p>try 语句按照如下方式工作：</p><ul><li>首先，执行<code>try</code>子句（在关键字<code>try</code>和关键字<code>except</code>之间的语句）</li><li>如果没有异常发生，忽略<code>except</code>子句，<code>try</code>子句执行后结束。</li><li>如果在执行<code>try</code>子句的过程中发生了异常，那么<code>try</code>子句余下的部分将被忽略。如果异常的类型和<code>except</code>之后的名称相符，那么对应的<code>except</code>子句将被执行。最后执行<code>try - except</code>语句之后的代码。</li><li>如果一个异常没有与任何的<code>except</code>匹配，那么这个异常将会传递给上层的<code>try</code>中。</li></ul><p>【例子】</p><p>[2]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f &#x3D; open(&#39;test.txt&#39;)</span><br><span class="line">    print(f.read())</span><br><span class="line">    f.close()</span><br><span class="line">except OSError:</span><br><span class="line">    print(&#39;打开文件出错&#39;)</span><br><span class="line"></span><br><span class="line"># 打开文件出错</span><br><span class="line">打开文件出错</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[3]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f &#x3D; open(&#39;test.txt&#39;)</span><br><span class="line">    print(f.read())</span><br><span class="line">    f.close()</span><br><span class="line">except OSError as error:</span><br><span class="line">    print(&#39;打开文件出错\n原因是：&#39; + str(error))</span><br><span class="line"></span><br><span class="line"># 打开文件出错</span><br><span class="line"># 原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;</span><br><span class="line">打开文件出错</span><br><span class="line">原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;</span><br></pre></td></tr></table></figure><p>一个<code>try</code>语句可能包含多个<code>except</code>子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p><p>【例子】</p><p>[4]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    int(&quot;abc&quot;)</span><br><span class="line">    s &#x3D; 1 + &#39;1&#39;</span><br><span class="line">    f &#x3D; open(&#39;test.txt&#39;)</span><br><span class="line">    print(f.read())</span><br><span class="line">    f.close()</span><br><span class="line">except OSError as error:</span><br><span class="line">    print(&#39;打开文件出错\n原因是：&#39; + str(error))</span><br><span class="line">except TypeError as error:</span><br><span class="line">    print(&#39;类型出错\n原因是：&#39; + str(error))</span><br><span class="line">except ValueError as error:</span><br><span class="line">    print(&#39;数值出错\n原因是：&#39; + str(error))</span><br><span class="line"></span><br><span class="line"># 数值出错</span><br><span class="line"># 原因是：invalid literal for int() with base 10: &#39;abc&#39;</span><br><span class="line">数值出错</span><br><span class="line">原因是：invalid literal for int() with base 10: &#39;abc&#39;</span><br></pre></td></tr></table></figure><p>【例子】</p><p>[5]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict1 &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&#125;</span><br><span class="line">try:</span><br><span class="line">    x &#x3D; dict1[&#39;y&#39;]</span><br><span class="line">except LookupError:</span><br><span class="line">    print(&#39;查询错误&#39;)</span><br><span class="line">except KeyError:</span><br><span class="line">    print(&#39;键错误&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"># 查询错误</span><br><span class="line">查询错误</span><br></pre></td></tr></table></figure><p><code>try-except-else</code>语句尝试查询不在<code>dict</code>中的键值对，从而引发了异常。这一异常准确地说应属于<code>KeyError</code>，但由于<code>KeyError</code>是<code>LookupError</code>的子类，且将<code>LookupError</code>置于<code>KeyError</code>之前，因此程序优先执行该<code>except</code>代码块。所以，使用多个<code>except</code>代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。</p><p>【例子】</p><p>[6]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict1 &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&#125;</span><br><span class="line">try:</span><br><span class="line">    x &#x3D; dict1[&#39;y&#39;]</span><br><span class="line">except KeyError:</span><br><span class="line">    print(&#39;键错误&#39;)</span><br><span class="line">except LookupError:</span><br><span class="line">    print(&#39;查询错误&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"># 键错误</span><br><span class="line">键错误</span><br></pre></td></tr></table></figure><p>【例子】一个 <code>except</code> 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</p><p>[7]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    s &#x3D; 1 + &#39;1&#39;</span><br><span class="line">    int(&quot;abc&quot;)</span><br><span class="line">    f &#x3D; open(&#39;test.txt&#39;)</span><br><span class="line">    print(f.read())</span><br><span class="line">    f.close()</span><br><span class="line">except (OSError, TypeError, ValueError) as error:</span><br><span class="line">    print(&#39;出错了！\n原因是：&#39; + str(error))</span><br><span class="line"></span><br><span class="line"># 出错了！</span><br><span class="line"># 原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</span><br><span class="line">出错了！</span><br><span class="line">原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</span><br></pre></td></tr></table></figure><hr><h2 id="4-try-except-finally-语句"><a href="#4-try-except-finally-语句" class="headerlink" title="4. try - except - finally 语句"></a>4. try - except - finally 语句</h2><p>try: 检测范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码</p><p>不管<code>try</code>子句里面有没有发生异常，<code>finally</code>子句都会执行。</p><p>【例子】如果一个异常在<code>try</code>子句里被抛出，而又没有任何的<code>except</code>把它截住，那么这个异常会在<code>finally</code>子句执行后被抛出。</p><p>[10]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def divide(x, y):</span><br><span class="line">    try:</span><br><span class="line">        result &#x3D; x &#x2F; y</span><br><span class="line">        print(&quot;result is&quot;, result)</span><br><span class="line">    except ZeroDivisionError:</span><br><span class="line">        print(&quot;division by zero!&quot;)</span><br><span class="line">    finally:</span><br><span class="line">        print(&quot;executing finally clause&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">divide(2, 1)</span><br><span class="line"># result is 2.0</span><br><span class="line"># executing finally clause</span><br><span class="line">divide(2, 0)</span><br><span class="line"># division by zero!</span><br><span class="line"># executing finally clause</span><br><span class="line">divide(&quot;2&quot;, &quot;1&quot;)</span><br><span class="line"># executing finally clause</span><br><span class="line"># TypeError: unsupported operand type(s) for &#x2F;: &#39;str&#39; and &#39;str&#39;</span><br><span class="line">result is 2.0</span><br><span class="line">executing finally clause</span><br><span class="line">division by zero!</span><br><span class="line">executing finally clause</span><br></pre></td></tr></table></figure><hr><h2 id="5-try-except-else-语句"><a href="#5-try-except-else-语句" class="headerlink" title="5. try - except - else 语句"></a>5. try - except - else 语句</h2><p>如果在<code>try</code>子句执行时没有发生异常，Python将执行<code>else</code>语句后的语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现异常后的处理代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常执行这块代码</span><br></pre></td></tr></table></figure><p>使用<code>except</code>而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。</p><p>try: 检测范围 except(Exception1[, Exception2[,…ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码</p><p>【例子】</p><p>[12]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    fh &#x3D; open(&quot;testfile.txt&quot;, &quot;w&quot;)</span><br><span class="line">    fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)</span><br><span class="line">except IOError:</span><br><span class="line">    print(&quot;Error: 没有找到文件或读取文件失败&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;内容写入文件成功&quot;)</span><br><span class="line">    fh.close()</span><br><span class="line"></span><br><span class="line"># 内容写入文件成功</span><br><span class="line">内容写入文件成功</span><br></pre></td></tr></table></figure><p>注意：<code>else</code>语句的存在必须以<code>except</code>语句的存在为前提，在没有<code>except</code>语句的<code>try</code>语句中使用<code>else</code>语句，会引发语法错误。</p><hr><h2 id="6-raise语句"><a href="#6-raise语句" class="headerlink" title="6. raise语句"></a>6. raise语句</h2><p>Python 使用<code>raise</code>语句抛出一个指定的异常。</p><p>【例子】</p><p>[13]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    raise NameError(&#39;HiThere&#39;)</span><br><span class="line">except NameError:</span><br><span class="line">    print(&#39;An exception flew by!&#39;)</span><br><span class="line">    </span><br><span class="line"># An exception flew by!</span><br><span class="line">An exception flew by!</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python入门-上&quot;&gt;&lt;a href=&quot;#Python入门-上&quot; class=&quot;headerlink&quot; title=&quot;Python入门(上)&quot;&gt;&lt;/a&gt;Python入门(上)&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; </summary>
      
    
    
    
    <category term="python基础" scheme="https://wicherqaq.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>运算符优先级</title>
    <link href="https://wicherqaq.github.io/2020/09/09/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://wicherqaq.github.io/2020/09/09/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2020-09-09T07:55:29.000Z</published>
    <updated>2020-09-09T08:20:05.843Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th><strong>优先级</strong></th><th><strong>运算符</strong></th><th><strong>名称或含义</strong></th><th><strong>使用形式</strong></th><th><strong>结合方向</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td><strong>[]</strong></td><td>数组下标</td><td>数组名[常量表达式]</td><td>左到右</td><td>–</td></tr><tr><td><strong>()</strong></td><td>圆括号</td><td>(表达式）/函数名(形参表)</td><td>–</td><td></td><td></td></tr><tr><td><strong>.</strong></td><td>成员选择（对象）</td><td>对象.成员名</td><td>–</td><td></td><td></td></tr><tr><td><strong>-&gt;</strong></td><td>成员选择（指针）</td><td>对象指针-&gt;成员名</td><td>–</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>2</strong></td><td><strong>-</strong></td><td>负号运算符</td><td>-表达式</td><td><strong>右到左</strong></td><td>单目运算符</td></tr><tr><td><strong>~</strong></td><td>按位取反运算符</td><td>~表达式</td><td></td><td></td><td></td></tr><tr><td><strong>++</strong></td><td>自增运算符</td><td>++变量名/变量名++</td><td></td><td></td><td></td></tr><tr><td><strong>–</strong></td><td>自减运算符</td><td>–变量名/变量名–</td><td></td><td></td><td></td></tr><tr><td>*****</td><td>取值运算符</td><td>*指针变量</td><td></td><td></td><td></td></tr><tr><td><strong>&amp;</strong></td><td>取地址运算符</td><td>&amp;变量名</td><td></td><td></td><td></td></tr><tr><td><strong>!</strong></td><td>逻辑非运算符</td><td>!表达式</td><td></td><td></td><td></td></tr><tr><td><strong>类型</strong></td><td>强制类型转换</td><td>(数据类型)表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>sizeof</strong></td><td>长度运算符</td><td>sizeof(表达式)</td><td>–</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>3</strong></td><td><strong>/</strong></td><td>除</td><td>表达式/表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>*****</td><td>乘</td><td>表达式*表达式</td><td></td><td></td><td></td></tr><tr><td><strong>%</strong></td><td>余数（取模）</td><td>整型表达式%整型表达式</td><td></td><td></td><td></td></tr><tr><td><strong>4</strong></td><td><strong><em>\</em>+**</strong></td><td>加</td><td>表达式+表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>-</strong></td><td>减</td><td>表达式-表达式</td><td></td><td></td><td></td></tr><tr><td><strong>5</strong></td><td><strong><em>\</em>&lt;&lt;**</strong></td><td>左移</td><td>变量&lt;&lt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>&gt;&gt;</strong></td><td>右移</td><td>变量&gt;&gt;表达式</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>6</strong></td><td><strong><em>\</em>&gt;**</strong></td><td>大于</td><td>表达式&gt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>&gt;=</strong></td><td>大于等于</td><td>表达式&gt;=表达式</td><td></td><td></td><td></td></tr><tr><td><strong>&lt;</strong></td><td>小于</td><td>表达式&lt;表达式</td><td></td><td></td><td></td></tr><tr><td><strong>&lt;=</strong></td><td>小于等于</td><td>表达式&lt;=表达式</td><td></td><td></td><td></td></tr><tr><td><strong>7</strong></td><td><strong>==</strong></td><td>等于</td><td>表达式==表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>!=</strong></td><td>不等于</td><td>表达式!= 表达式</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>8</strong></td><td><strong><em>\</em>&amp;**</strong></td><td>按位与</td><td>表达式&amp;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>9</strong></td><td><strong><em>\</em>^**</strong></td><td>按位异或</td><td>表达式^表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>10</strong></td><td><strong><em>\</em>|**</strong></td><td>按位或</td><td>表达式|表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>11</strong></td><td><strong><em>\</em>&amp;&amp;**</strong></td><td>逻辑与</td><td>表达式&amp;&amp;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td><strong>12</strong></td><td><strong><em>\</em>||**</strong></td><td>逻辑或</td><td>表达式||表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>13</strong></td><td><strong><em>\</em>?:**</strong></td><td>条件运算符</td><td>表达式1?表达式2: 表达式3</td><td><strong><em>\</em>右到左**</strong></td><td>三目运算符</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>14</strong></td><td><strong><em>\</em>=**</strong></td><td>赋值运算符</td><td>变量=表达式</td><td><strong><em>\</em>右到左**</strong></td><td>–</td></tr><tr><td><strong>/=</strong></td><td>除后赋值</td><td>变量/=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>*=</strong></td><td>乘后赋值</td><td>变量*=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>%=</strong></td><td>取模后赋值</td><td>变量%=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>+=</strong></td><td>加后赋值</td><td>变量+=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>-=</strong></td><td>减后赋值</td><td>变量-=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>&lt;&lt;=</strong></td><td>左移后赋值</td><td>变量&lt;&lt;=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>&gt;&gt;=</strong></td><td>右移后赋值</td><td>变量&gt;&gt;=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>&amp;=</strong></td><td>按位与后赋值</td><td>变量&amp;=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>^=</strong></td><td>按位异或后赋值</td><td>变量^=表达式</td><td>–</td><td></td><td></td></tr><tr><td><strong>|=</strong></td><td>按位或后赋值</td><td>变量|=表达式</td><td>–</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>15</strong></td><td><strong>，</strong></td><td>逗号运算符</td><td>表达式,表达式,…</td><td>左到右</td><td>–</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>同一优先级的运算符，运算次序由结合方向所决定。</li><li>简单记就是：！ &gt;  算术运算符  &gt; 关系运算符 &gt;  &amp;&amp;  &gt; || &gt;  赋值运算符</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;优先级&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;名称或含义&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;使用形式&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo博客迁移</title>
    <link href="https://wicherqaq.github.io/2020/09/03/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>https://wicherqaq.github.io/2020/09/03/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</id>
    <published>2020-09-03T06:12:56.000Z</published>
    <updated>2020-09-03T06:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><ul><li>安装node.js</li><li>安装cmpn镜像源 <code>npm install -g cnpm --registery=https://registry.npm.taobao.org</code></li><li>安装hexo框架 <code>cnpm install -g hexo-cli</code>，并且利用<code>hexo -v</code>来验证</li></ul><h4 id="拷贝原始数据"><a href="#拷贝原始数据" class="headerlink" title="拷贝原始数据"></a>拷贝原始数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 以下是需要拷贝的文件和目录</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br></pre></td></tr></table></figure><h4 id="安装依赖模块"><a href="#安装依赖模块" class="headerlink" title="安装依赖模块"></a>安装依赖模块</h4><p>执行下面的命令之前，需要把以上拷贝的文件复制到新电脑的博客文件夹下，如<code>/blog</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h4 id="构建、运行、发布"><a href="#构建、运行、发布" class="headerlink" title="构建、运行、发布"></a>构建、运行、发布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d# 要求填写github或其他发布平台的账号密码</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; class=&quot;headerlink&quot; title=&quot;环境安装&quot;&gt;&lt;/a&gt;环境安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;安装node.js&lt;/li&gt;
&lt;li&gt;安装cmpn镜像源 &lt;code&gt;npm install -g cnpm -</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://wicherqaq.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux的Shell编程</title>
    <link href="https://wicherqaq.github.io/2020/09/03/Linux%E7%9A%84Shell%E7%BC%96%E7%A8%8B/"/>
    <id>https://wicherqaq.github.io/2020/09/03/Linux%E7%9A%84Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2020-09-03T05:21:22.000Z</published>
    <updated>2020-09-03T06:08:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux的Shell编程"><a href="#Linux的Shell编程" class="headerlink" title="Linux的Shell编程"></a>Linux的Shell编程</h4><p> Shell 编程一般指 shell 脚本编程。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>使用 vi 编辑器新建一个文件 hello.sh </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash </span></span><br><span class="line">echo "Hello World !"</span><br></pre></td></tr></table></figure><h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 方式1</span><br><span class="line">sh hello.sh</span><br><span class="line"></span><br><span class="line"># 方式2</span><br><span class="line">chmod +x .&#x2F;hello.sh   #使脚本具有执行权限</span><br><span class="line">.&#x2F;hello.sh    #执行脚本</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">str="hello"</span><br><span class="line">echo $&#123;str&#125;world</span><br></pre></td></tr></table></figure><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">echo $HOME</span><br></pre></td></tr></table></figure><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><table><thead><tr><th>$#</th><th>传递到脚本的参数个数</th></tr></thead><tbody><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程 ID 号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的 ID 号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。 0 表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "第一个参数为： $1";</span><br><span class="line">echo "参数个数为： $#";</span><br><span class="line">echo "传递的参数作为一个字符串显示： $*";</span><br></pre></td></tr></table></figure><p>执行: ./test.sh 1 2 3 </p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=1;</span><br><span class="line">b=2;</span><br><span class="line">echo `expr $a + $b`;</span><br><span class="line">echo  $((a+b));</span><br><span class="line">echo  $[a+b];</span><br></pre></td></tr></table></figure><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p "please input your name:" NAME ## read命令用于从控制台读取输入数据</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># printf '%s\n' $NAME</span></span></span><br><span class="line">if [ $NAME = root ]</span><br><span class="line">then</span><br><span class="line">echo "hello $&#123;NAME&#125;, welcome !"</span><br><span class="line">elif [ $NAME = itcast ]</span><br><span class="line">then</span><br><span class="line">echo "hello $&#123;NAME&#125;, welcome !"</span><br><span class="line">else</span><br><span class="line">echo "Get out Please!"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>方式1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for N in 1 2 3 </span><br><span class="line">do</span><br><span class="line">    echo $N</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for ((i = 0; i &lt;= 5; i++)) </span><br><span class="line"> do </span><br><span class="line">    echo "welcome $i times" </span><br><span class="line"> done</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">funWithReturn()&#123;</span><br><span class="line">echo "这个函数会对输入的两个数字进行相加运算..."</span><br><span class="line">echo "输入第一个数字: "</span><br><span class="line">read aNum</span><br><span class="line">echo "输入第二个数字: "</span><br><span class="line">read anotherNum</span><br><span class="line">echo "两个数字分别为 $aNum 和 $anotherNum !"</span><br><span class="line">return $(($aNum+$anotherNum))</span><br><span class="line">&#125; </span><br><span class="line">funWithReturn</span><br><span class="line">echo "输入的两个数字之和为 $? !"</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Linux的Shell编程&quot;&gt;&lt;a href=&quot;#Linux的Shell编程&quot; class=&quot;headerlink&quot; title=&quot;Linux的Shell编程&quot;&gt;&lt;/a&gt;Linux的Shell编程&lt;/h4&gt;&lt;p&gt; Shell 编程一般指 shell 脚本编程。&lt;/</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://wicherqaq.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>树莓派开机发送ip地址到邮箱</title>
    <link href="https://wicherqaq.github.io/2020/08/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E6%9C%BA%E5%8F%91%E9%80%81ip%E5%9C%B0%E5%9D%80%E5%88%B0%E9%82%AE%E7%AE%B1/"/>
    <id>https://wicherqaq.github.io/2020/08/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E6%9C%BA%E5%8F%91%E9%80%81ip%E5%9C%B0%E5%9D%80%E5%88%B0%E9%82%AE%E7%AE%B1/</id>
    <published>2020-08-27T01:27:59.000Z</published>
    <updated>2020-08-27T01:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>一直以来，获取树莓派的IP一直都是一个让人头疼的问题。因为可能会面对不同的场景，某些场景下真的不能判断哪个ip是树莓派的。由于公司局域网内的机器比较多，我用<strong>IP Scanner</strong>软件扫描局域网内的机器，并不知道哪个IP是树莓派的，一个个试过去也不太现实，因此<strong>利用开机脚本发送邮箱</strong>成了一个不错的解决方案。</p><p>下面我来介绍一下如何才能实现这个功能</p><h4 id="第一步、编写python脚本"><a href="#第一步、编写python脚本" class="headerlink" title="第一步、编写python脚本"></a>第一步、编写python脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import smtplib</span><br><span class="line">import time</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line"></span><br><span class="line"># 校验当前计算机的网络是否可用，是否可以连外网</span><br><span class="line">def check_network():</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            url &#x3D; &quot;www.baidu.com&quot; </span><br><span class="line">            host &#x3D; socket.gethostbyname(url)</span><br><span class="line">            socket.create_connection((host,80),2)</span><br><span class="line">            print(&quot;Network is Ready!&quot;)</span><br><span class="line">            break</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">            print(&quot;Network is not ready,Sleep 5s...&quot;)</span><br><span class="line">            time.sleep(5)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"># 获取本机的IP地址</span><br><span class="line">def get_host_ip():</span><br><span class="line">    try:</span><br><span class="line">        s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((&#39;8.8.8.8&#39;, 80))</span><br><span class="line">        ip &#x3D; s.getsockname()[0]</span><br><span class="line">    finally:</span><br><span class="line">        s.close()</span><br><span class="line"></span><br><span class="line">    return ip</span><br><span class="line"></span><br><span class="line"># 发送邮件</span><br><span class="line">def send_email():</span><br><span class="line">    from_addr &#x3D; &quot;your email address@mail.com&quot;</span><br><span class="line">    password &#x3D; &quot;your password&quot;</span><br><span class="line">    smtp_server &#x3D; &#39;smtp.163.com&#39;</span><br><span class="line">    to_addr &#x3D; &quot;receive address&quot;</span><br><span class="line">    msg &#x3D; MIMEText(&#39;Your raspberry IP addr is:&#39;+get_host_ip())</span><br><span class="line">    msg[&quot;Subject&quot;] &#x3D; &quot;raspberry IP addr notify&quot;</span><br><span class="line">    msg[&#39;from&#39;] &#x3D; from_addr</span><br><span class="line">    msg[&#39;to&#39;] &#x3D; to_addr</span><br><span class="line">    try:</span><br><span class="line">        server &#x3D; smtplib.SMTP(smtp_server)</span><br><span class="line">        server.login(from_addr, password)</span><br><span class="line">        server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class="line">        server.quit()</span><br><span class="line">        print(&#39;success&#39;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&#39;Faild:%s&#39; % e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    check_network()</span><br><span class="line">    send_email()</span><br></pre></td></tr></table></figure><h4 id="第二部、编写shell脚本"><a href="#第二部、编写shell脚本" class="headerlink" title="第二部、编写shell脚本"></a>第二部、编写shell脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以下操作都在&#x2F;usr&#x2F;local&#x2F;src&#x2F;raspberryIP下</span><br><span class="line">&#x2F;&#x2F; 需要把上一步编写的python脚本放到该目录下</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;raspberryIP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个*.sh可执行文件</span><br><span class="line">sudo vim clientStart.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 编写执行脚本</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;raspberryIP</span><br><span class="line">sudo python raspberryIP.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 保存后测试下是否可以执行</span><br><span class="line">.&#x2F;clientStart.sh</span><br></pre></td></tr></table></figure><h4 id="第三步、开机启动方法设置"><a href="#第三步、开机启动方法设置" class="headerlink" title="第三步、开机启动方法设置"></a>第三步、开机启动方法设置</h4><p>编辑/etc/rc.local文件，在rc.local文件里Exit 0 前加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;src&#x2F;raspberryIP&#x2F;clientStart.sh start</span><br></pre></td></tr></table></figure><p>至此，所有工作都已完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;一直以来，获取树莓派的IP一直都是一个让人头疼的问题。因为可能会面对不同的场景，某些场景下真的不能判断哪个ip是树莓派的。由于公司局域网内的</summary>
      
    
    
    
    
    <category term="树莓派" scheme="https://wicherqaq.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Idea中git的使用</title>
    <link href="https://wicherqaq.github.io/2020/08/01/Idea%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://wicherqaq.github.io/2020/08/01/Idea%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-01T10:39:07.000Z</published>
    <updated>2020-08-01T10:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作中多人使用<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">版本控制</a>软件协作开发，常见的应用场景归纳如下：</p><p>假设小组中有两个人，组长小张，组员小袁</p><p>场景一：小张创建项目并提交到远程<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">Git</a>仓库</p><p>场景二：小袁从远程<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">Git</a>仓库上获取项目源码</p><p>场景三：小袁修改了部分源码，提交到远程仓库</p><p>场景四：小张从远程仓库获取小袁的提交</p><p>场景五：小袁接受了一个新功能的任务，创建了一个分支并在分支上开发</p><p>场景六：小袁把分支提交到远程Git仓库</p><p>场景七：小张获取小袁提交的分支</p><p>场景八：小张把分支合并到主干</p><h3 id="场景一：小张创建项目并提交到远程Git仓库"><a href="#场景一：小张创建项目并提交到远程Git仓库" class="headerlink" title="场景一：小张创建项目并提交到远程Git仓库"></a>场景一：小张创建项目并提交到远程Git仓库</h3><p>创建好项目，选择VCS - &gt; Import into Version Control -&gt; Create Git Repository</p><p><img src="http://img.blog.csdn.net/20160912161234797" alt="img"></p><p>接下来指定本地仓库的位置，按个人习惯指定即可，例如这里选择了项目源代码同目录</p><p><img src="http://img.blog.csdn.net/20160912161334752" alt="img"></p><p>点击OK后创建完成本地仓库，注意，这里仅仅是本地的。下面把项目源码添加到本地仓库。</p><p>下图是Git与提交有关的三个命令对应的操作，Add命令是把文件从IDE的工作目录添加到本地仓库的stage区，Commit命令把stage区的暂存文件提交到当前分支的仓库，并清空stage区。Push命令把本地仓库的提交同步到远程仓库。</p><p><img src="http://img.blog.csdn.net/20160912164147415" alt="img"></p><p>IDEA中对操作做了一定的简化，Commit和Push可以在一步中完成。</p><p>具体操作，在项目上点击右键，选择Git菜单</p><p><img src="http://img.blog.csdn.net/20160912165901032" alt="img"></p><p><img src="http://img.blog.csdn.net/20160912165911954" alt="img"></p><p><img src="http://img.blog.csdn.net/20160912165921938" alt="img"></p><p>因为是第一次提交，Push前需要指定远程仓库的地址。如下图，点击Define remote后，在弹出的窗口中输入远程仓库地址。</p><p><img src="http://img.blog.csdn.net/20160912165942829" alt="img"></p><h3 id="场景二：小袁从远程Git仓库上获取项目源码"><a href="#场景二：小袁从远程Git仓库上获取项目源码" class="headerlink" title="场景二：小袁从远程Git仓库上获取项目源码"></a>场景二：小袁从远程Git仓库上获取项目源码</h3><p>即克隆项目，操作如下：</p><p><img src="http://img.blog.csdn.net/20160912170148207" alt="img"></p><p>输入小张Push时填写的远程仓库地址</p><p><img src="http://img.blog.csdn.net/20160912170214880" alt="img"></p><p>接下来按向导操作，即可把项目从远程仓库克隆到本地仓库和IDE工作区。</p><h3 id="场景三：小袁修改了部分源码，提交到远程仓库"><a href="#场景三：小袁修改了部分源码，提交到远程仓库" class="headerlink" title="场景三：小袁修改了部分源码，提交到远程仓库"></a>场景三：小袁修改了部分源码，提交到远程仓库</h3><p>这个操作和首次提交的流程基本一致，分别是 Add -&gt; Commit -&gt; Push。请参考场景一</p><h3 id="场景四：小张从远程仓库获取小袁的提交"><a href="#场景四：小张从远程仓库获取小袁的提交" class="headerlink" title="场景四：小张从远程仓库获取小袁的提交"></a>场景四：小张从远程仓库获取小袁的提交</h3><p>获取更新有两个命令：Fetch和Pull，Fetch是从远程仓库下载文件到本地的origin/master，然后可以手动对比修改决定是否合并到本地的master库。Pull则是直接下载并合并。如果各成员在工作中都执行修改前先更新的规范，则可以直接使用Pull方式以简化操作。</p><p><img src="http://img.blog.csdn.net/20160912170628933" alt="img"></p><h3 id="场景五：小袁接受了一个新功能的任务，创建了一个分支并在分支上开发"><a href="#场景五：小袁接受了一个新功能的任务，创建了一个分支并在分支上开发" class="headerlink" title="场景五：小袁接受了一个新功能的任务，创建了一个分支并在分支上开发"></a>场景五：小袁接受了一个新功能的任务，创建了一个分支并在分支上开发</h3><p>建分支也是一个常用的操作，例如临时修改bug、开发不确定是否加入的功能等，都可以创建一个分支，再等待合适的时机合并到主干。</p><p>创建流程如下：</p><p><img src="http://img.blog.csdn.net/20160912171844429" alt="img"></p><p>选择New Branch并输入一个分支的名称</p><p><img src="http://img.blog.csdn.net/20160912171858663" alt="img"></p><p>创建完成后注意IDEA的右下角，如下图，Git: wangpangzi_branch表示已经自动切换到wangpangzi_branch分支，当前工作在这个分支上。</p><p>点击后弹出一个小窗口，在Local Branches中有其他可用的本地分支选项，点击后选择Checkout即可切换当前工作的分支(见场景7操作切换其他分支)。</p><p><img src="http://img.blog.csdn.net/20160912173123122" alt="img"></p><p>如下图，点击Checkout</p><p><img src="http://img.blog.csdn.net/20160912173307202" alt="img"></p><p>注意，这里创建的分支仅仅在本地仓库，如果想让组长小张获取到这个分支，还需要提交到远程仓库。</p><h3 id="场景六：小袁把分支提交到远程Git仓库"><a href="#场景六：小袁把分支提交到远程Git仓库" class="headerlink" title="场景六：小袁把分支提交到远程Git仓库"></a>场景六：小袁把分支提交到远程Git仓库</h3><p>切换到新建的分支，使用Push功能</p><p><img src="http://img.blog.csdn.net/20160912173718844" alt="img"></p><p><img src="http://img.blog.csdn.net/20160912174243815" alt="img"></p><h3 id="场景七：小张获取小袁提交的分支"><a href="#场景七：小张获取小袁提交的分支" class="headerlink" title="场景七：小张获取小袁提交的分支"></a>场景七：小张获取小袁提交的分支</h3><p>使用Pull功能打开更新窗口，点击Remote栏后面的刷新按钮，会在Branches to merge栏中刷新出新的分支。这里并不想做合并，所以不要选中任何分支，直接点击Pull按钮完成操作。</p><p><img src="http://img.blog.csdn.net/20160912174329143" alt="img"></p><p>更新后，再点击右下角，可以看到在Remote Branches区已经有了新的分支，点击后在弹出的子菜单中选择Checkout as new local branch，在本地仓库中创建该分支。完成后在Local Branches区也会出现该分支的选项，可以按上面的方法，点击后选择Checkout切换。</p><p><img src="http://img.blog.csdn.net/20160912174729488" alt="img"></p><h3 id="场景八：小张把分支合并到主干"><a href="#场景八：小张把分支合并到主干" class="headerlink" title="场景八：小张把分支合并到主干"></a>场景八：小张把分支合并到主干</h3><p>新功能开发完成，体验很好，项目组决定把该功能合并到主干上。</p><p>切换到master分支，选择Merge Changes</p><p><img src="http://img.blog.csdn.net/20160912175201306" alt="img"></p><p>选择要合并的分支，点击Merge完成</p><p><img src="http://img.blog.csdn.net/20160912175359903" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工作中多人使用&lt;a href=&quot;http://lib.csdn.net/base/git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;版本控制&lt;/a&gt;软件协作开发，常见的应用场景归纳如下：&lt;/p&gt;
&lt;p&gt;假设小组中有两个人，组长小张，组员小袁&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="开发工具" scheme="https://wicherqaq.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存穿透、缓存击穿、缓存雪崩</title>
    <link href="https://wicherqaq.github.io/2020/06/01/redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
    <id>https://wicherqaq.github.io/2020/06/01/redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</id>
    <published>2020-06-01T02:09:36.000Z</published>
    <updated>2020-06-01T02:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>随着互联网系统发展的逐步完善，提高系统的QPS（每秒查询率），目前的绝大部分系统都增加了<a href="http://mp.weixin.qq.com/s?__biz=MzU5NTAzNjM0Mw==&mid=2247484731&idx=2&sn=932f690ee1b775e864d3e113739a421a&chksm=fe7954e3c90eddf5d2f7de72909a43b5151797df7212b10311c497c3d1708d9a0613279f5734&scene=21#wechat_redirect" target="_blank" rel="noopener">缓存机制</a>从而避免请求过多的直接与数据库操作从而造成系统瓶颈，极大的提升了用户体验和系统稳定性。但同时，一个缓存机制的设计如果不是很好，就可能带来一些问题：<strong>缓存穿透、缓存击穿与缓存雪崩效应</strong>。这些问题的出现本质上都是在一定的条件下导致的数据库DB的访问量过高导致的系统QPS较低的问题。</p><p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返回结果，数据库也没取到，那直接返回空结果。常见的缓存机制如下图：</p><img src="/2020/06/01/redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/缓存机制.png" style="zoom:60%;"><h3 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>缓存穿透是指<strong>缓存和数据库中都没有的数据</strong>，而用户不断发起请求。由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p>如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li><strong>接口层增加校验</strong>，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</li><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为<strong>key-null</strong>，<strong>缓存有效时间可以设置短点</strong>，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p><strong>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期）</strong>，这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li>设置热点数据永远不过期。</li><li>接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些 服务 不可用时候，进行熔断，失败快速返回机制。</li><li>布隆过滤器。bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，</li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，    缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</li><li>设置热点数据永远不过期。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;随着互联网系统发展的逐步完善，提高系统的QPS（每秒查询率），目前的绝大部分系统都增加了&lt;a href=&quot;http://mp.weixin.</summary>
      
    
    
    
    <category term="Java面试题" scheme="https://wicherqaq.github.io/categories/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>wget命令</title>
    <link href="https://wicherqaq.github.io/2020/05/30/wget%E5%91%BD%E4%BB%A4/"/>
    <id>https://wicherqaq.github.io/2020/05/30/wget%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-30T04:01:02.000Z</published>
    <updated>2020-05-30T04:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p><code>wget [选项] [参数]</code></p></li><li><p>参数</p><blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-a&lt;日志文件&gt;</td><td>在指定的日志文件中记录资料的执行过程；</td></tr><tr><td>-A&lt;后缀名&gt;</td><td>指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；</td></tr><tr><td>-b</td><td>进行后台的方式运行wget；</td></tr><tr><td>-B&lt;连接地址&gt;</td><td>设置参考的连接地址的基地地址；</td></tr><tr><td>-c</td><td>继续执行上次终端的任务；</td></tr><tr><td>-C&lt;标志&gt;</td><td>设置服务器数据块功能标志on为激活，off为关闭，默认值为on；</td></tr><tr><td>-d</td><td>调试模式运行指令；</td></tr><tr><td>-D&lt;域名列表&gt;</td><td>设置顺着的域名列表，域名之间用“，”分隔；</td></tr><tr><td>-e&lt;指令&gt;</td><td>作为文件“.wgetrc”中的一部分执行指定的指令；</td></tr><tr><td>-h</td><td>显示指令帮助信息；</td></tr><tr><td>-i&lt;文件&gt;</td><td>从指定文件获取要下载的URL地址；</td></tr><tr><td>-l&lt;目录列表&gt;</td><td>设置顺着的目录列表，多个目录用“，”分隔；</td></tr><tr><td>-L</td><td>仅顺着关联的连接；</td></tr><tr><td>-r</td><td>递归下载方式；</td></tr><tr><td>-nc</td><td>文件存在时，下载文件不覆盖原有文件；</td></tr><tr><td>-nv</td><td>下载时只显示更新和出错信息，不显示指令的详细执行过程；</td></tr><tr><td>-q</td><td>不显示指令执行过程；</td></tr><tr><td>-nh</td><td>不查询主机名称；</td></tr><tr><td>-v</td><td>显示详细执行过程；</td></tr><tr><td>-V</td><td>显示版本信息；</td></tr><tr><td>–passive-ftp</td><td>使用被动模式PASV连接FTP服务器；</td></tr><tr><td>–follow-ftp</td><td>从HTML文件中下载FTP连接文件。</td></tr></tbody></table></blockquote></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;test.com&#x2F;testfile.zip -&gt;下载指定文件到当前文件夹</span><br><span class="line">wget -O wordpress.zip http:&#x2F;&#x2F;test.com&#x2F;download -&gt;指定保存名字</span><br><span class="line">wget --limit-rate&#x3D;300k http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip -&gt;限制下载速度</span><br><span class="line">wget -c http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip -&gt;断点续传</span><br><span class="line">wget -b http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip -&gt;后台下载</span><br><span class="line"></span><br><span class="line"># 设置使用指定浏览器下载（伪装下载）</span><br><span class="line">wget --user-agent&#x3D;&quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit&#x2F;534.16 (KHTML, like Gecko) Chrome&#x2F;10.0.648.204 Safari&#x2F;534.16&quot; http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip</span><br><span class="line"></span><br><span class="line">wget --spider url -&gt;测试下载</span><br><span class="line">wget --tries&#x3D;40 URL -&gt;设置重试次数为40</span><br><span class="line">wget -i filelist.txt -&gt;从filelist.txt获取下载地址</span><br><span class="line"></span><br><span class="line"># 镜像网站</span><br><span class="line"># --miror开户镜像下载。</span><br><span class="line"># -p下载所有为了html页面显示正常的文件。</span><br><span class="line"># --convert-links下载后，转换成本地的链接。</span><br><span class="line"># -P .&#x2F;LOCAL保存所有文件和目录到本地指定目录</span><br><span class="line">wget --mirror -p --convert-links -P .&#x2F;LOCAL URL</span><br><span class="line"></span><br><span class="line">wget --reject&#x3D;gif ur -&gt;下载一个网站，但你不希望下载图片，可以使用这条命令</span><br><span class="line">wget -o download.log URL -&gt;把下载信息存入日志文件</span><br><span class="line">wget -Q5m -i filelist.txt -&gt;限制总下载文件大小</span><br><span class="line">wget -r -A.pdf url -&gt;下载指定格式文件</span><br><span class="line"></span><br><span class="line"># FTP下载</span><br><span class="line">wget ftp-url</span><br><span class="line">wget --ftp-user&#x3D;USERNAME --ftp-password&#x3D;PASSWORD url</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，w</summary>
      
    
    
    
    <category term="Linux命令" scheme="https://wicherqaq.github.io/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>FSATJSON工具</title>
    <link href="https://wicherqaq.github.io/2020/05/30/FSATJSON%E5%B7%A5%E5%85%B7/"/>
    <id>https://wicherqaq.github.io/2020/05/30/FSATJSON%E5%B7%A5%E5%85%B7/</id>
    <published>2020-05-30T03:02:43.000Z</published>
    <updated>2020-05-30T03:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.47&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="案例编码"><a href="#案例编码" class="headerlink" title="案例编码"></a>案例编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;存储数据</span><br><span class="line">public void fun(JSONObject object)&#123;</span><br><span class="line">&#x2F;&#x2F;string</span><br><span class="line">  object.put(&quot;string&quot;,&quot;string&quot;);</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F;int</span><br><span class="line">    object.put(&quot;int&quot;,2);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;boolean</span><br><span class="line">    object.put(&quot;boolean&quot;,true);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;array</span><br><span class="line">    List&lt;Integer&gt; integers &#x3D; Arrays.asList(1,2,3);</span><br><span class="line">    object.put(&quot;list&quot;,integers);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;null</span><br><span class="line">    object.put(&quot;null&quot;,null);</span><br><span class="line">    </span><br><span class="line">    System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">&#123;&quot;boolean&quot;:true,&quot;string&quot;:&quot;string&quot;,&quot;list&quot;:[1,2,3],&quot;int&quot;:2&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;解析数据</span><br><span class="line">public void fun(JSONObject object)&#123;</span><br><span class="line">&#x2F;&#x2F;string</span><br><span class="line">String s &#x3D; object.getString(&quot;string&quot;);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int</span><br><span class="line">int i &#x3D; object.getIntValue(&quot;int&quot;);</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean</span><br><span class="line">boolean b &#x3D; object.getBooleanValue(&quot;boolean&quot;);</span><br><span class="line"> System.out.println(b);</span><br><span class="line"> </span><br><span class="line">  &#x2F;&#x2F;list</span><br><span class="line">  List&lt;Integer&gt; integers &#x3D; JSON.parseArray(object.getJSONArray(&quot;list&quot;).toJSONString(),Integer.class);</span><br><span class="line">  integers.forEach(System.out::println);</span><br><span class="line">  &#x2F;&#x2F;null</span><br><span class="line">  System.out.println(object.getString(&quot;null&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;maven依赖&quot;&gt;&lt;a href=&quot;#maven依赖&quot; class=&quot;headerlink&quot; title=&quot;maven依赖&quot;&gt;&lt;/a&gt;maven依赖&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Java工具集" scheme="https://wicherqaq.github.io/categories/Java%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>String、StringBuffer、StringBuilder</title>
    <link href="https://wicherqaq.github.io/2020/05/28/String%E3%80%81StringBuffer%E3%80%81StringBuilder/"/>
    <id>https://wicherqaq.github.io/2020/05/28/String%E3%80%81StringBuffer%E3%80%81StringBuilder/</id>
    <published>2020-05-28T03:57:32.000Z</published>
    <updated>2020-05-28T04:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>String是一个final修饰类，所有的属性也是final。所以具有不可变性，对字符串的操作，比如拼接、剪切都会产生新的String对象。</li><li>StringBuffer本质是一个线程安全的可以修改字符串序列。因为保证线程安全（sync），所以会带来额外的性能消耗。</li><li>StringBuilder本质上和StringBuffer没有区别，但是StringBuilder去掉了线程安全部分，提高了操作效率。是绝大部分情况下字符串拼接的首选。</li></ul><p>注：如果确定拼接字符串会发生多次，并且长度可预计，那么可在开始的时候指定长度的大小，避免数组的扩容造成的开销。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;String是一个final修饰类，所有的属性也是final。所以具有不可变性，对字符串的操作，比如拼接、剪切都会产生新的Str</summary>
      
    
    
    
    <category term="Java面试题" scheme="https://wicherqaq.github.io/categories/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>exception和error的区别</title>
    <link href="https://wicherqaq.github.io/2020/05/28/exception%E5%92%8Cerror%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://wicherqaq.github.io/2020/05/28/exception%E5%92%8Cerror%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-05-28T03:38:24.000Z</published>
    <updated>2020-05-28T03:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="exception和error的区别"><a href="#exception和error的区别" class="headerlink" title="exception和error的区别"></a>exception和error的区别</h3><p>exception和error都继承自Throwable，在Java中只有Throwable类型的实例才可以被抛出和捕获。</p><p>error指正常情况下不太可能出现的情况，绝大部分的error或导致程序崩溃，处于非正常的不可恢复的状态。</p><blockquote><p>如OutOfMemoryError、StackOverflowError。</p><p>是程序中不应该试图捕获的严重错误</p></blockquote><p>exception是程序正常运行中可以预料的意外情况，可以捕获并处理。</p><h3 id="运行时异常和一般异常的区别"><a href="#运行时异常和一般异常的区别" class="headerlink" title="运行时异常和一般异常的区别"></a>运行时异常和一般异常的区别</h3><p>受检查异常：在编译时被强制检查的异常。在方法的声明中声明的异常。</p><blockquote><p>如classNotFoundException、IOException</p></blockquote><p>不受检查的异常：不受检查的异常通常是在编码中可以避免的逻辑错误，根据需求来判断如何处理，不需要再编译期强制要求。</p><h3 id="几种常见的运行时异常"><a href="#几种常见的运行时异常" class="headerlink" title="几种常见的运行时异常"></a>几种常见的运行时异常</h3><p>运行时异常RuntimeException是所有不受检查异常的基类</p><p>NullPointException、ClassCastException、NumberFormatException、IndexOutOfBoundsException</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;exception和error的区别&quot;&gt;&lt;a href=&quot;#exception和error的区别&quot; class=&quot;headerlink&quot; title=&quot;exception和error的区别&quot;&gt;&lt;/a&gt;exception和error的区别&lt;/h3&gt;&lt;p&gt;except</summary>
      
    
    
    
    <category term="Java面试题" scheme="https://wicherqaq.github.io/categories/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>树莓派设置无线连接和静态IP</title>
    <link href="https://wicherqaq.github.io/2020/05/26/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%99%E6%80%81IP/"/>
    <id>https://wicherqaq.github.io/2020/05/26/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%99%E6%80%81IP/</id>
    <published>2020-05-26T01:58:42.000Z</published>
    <updated>2020-05-26T02:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置无线连接"><a href="#设置无线连接" class="headerlink" title="设置无线连接"></a>设置无线连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</span><br><span class="line"> </span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">    ssid&#x3D;&quot;你的无线网络的名字&quot;</span><br><span class="line">    psk&#x3D;&quot;无线网络的密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;dhcpcd.conf</span><br><span class="line"> </span><br><span class="line">#在最后一行添加如下字段,注意是wlan0哦</span><br><span class="line"> </span><br><span class="line">interface wlan0</span><br><span class="line">static ip_address&#x3D;你的IP</span><br><span class="line">static routers&#x3D;你的路由器的管理地址</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;设置无线连接&quot;&gt;&lt;a href=&quot;#设置无线连接&quot; class=&quot;headerlink&quot; title=&quot;设置无线连接&quot;&gt;&lt;/a&gt;设置无线连接&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="树莓派" scheme="https://wicherqaq.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>解决树莓派apt-get更新速度慢的方法</title>
    <link href="https://wicherqaq.github.io/2020/05/25/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BEapt-get%E6%9B%B4%E6%96%B0%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://wicherqaq.github.io/2020/05/25/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BEapt-get%E6%9B%B4%E6%96%B0%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-25T15:00:04.000Z</published>
    <updated>2020-05-25T15:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>原理就是使用国内的镜像源，代替国外的镜像源。</p><p>有两个推荐的源：</p><ul><li>清华大学镜像：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.tuna.tsinghua.edu.cn%2Fraspbian%2Fraspbian%2F" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a></li><li>阿里云镜像：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.aliyun.com%2Fraspbian%2Fraspbian%2F" target="_blank" rel="noopener">https://mirrors.aliyun.com/raspbian/raspbian/</a></li></ul><p>1.备份原系统的apt的源镜像列表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.<span class="built_in">list</span> /etc/apt/sources.<span class="built_in">list</span>.bak</span><br></pre></td></tr></table></figure><p>2.编辑sources.list 文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>3.注释掉原来的内容，添加以下内容：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/raspbian</span><span class="regexp">/raspbian/</span> buster main contrib non-free rpi</span><br><span class="line">deb-src <span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/raspbian</span><span class="regexp">/raspbian/</span> buster main contrib non-free rpi</span><br></pre></td></tr></table></figure><p><strong>注意：这里编辑的时候需要注意版本（只需要更换链接部分的内容就可以）</strong></p><table><thead><tr><th>Debian版本</th><th>对应名称</th></tr></thead><tbody><tr><td>Debian7</td><td>wheezy</td></tr><tr><td>Debian8</td><td>jessie</td></tr><tr><td>Debian9</td><td>stretch</td></tr><tr><td>Debian10</td><td>buster</td></tr></tbody></table><p>保存退出。</p><p>再执行 <code>sudo apt-get update</code> 和 <code>sudo apt-get upgrade</code>，就能看到加速效果了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原理就是使用国内的镜像源，代替国外的镜像源。&lt;/p&gt;
&lt;p&gt;有两个推荐的源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清华大学镜像：&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.tuna.tsinghua.e</summary>
      
    
    
    
    <category term="树莓派" scheme="https://wicherqaq.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>树莓派安装操作系统</title>
    <link href="https://wicherqaq.github.io/2020/05/25/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wicherqaq.github.io/2020/05/25/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-25T13:49:42.000Z</published>
    <updated>2020-05-25T14:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>8G以上Micro SD卡和读卡器，注意SD卡的读写速度直接影响系统的运行速度</p><h3 id="下载官网的最新系统"><a href="#下载官网的最新系统" class="headerlink" title="下载官网的最新系统"></a>下载官网的最新系统</h3><p><a href="www.baidu.com">百度网盘链接（系统镜像和烧录工具）</a></p><p>密码：</p><h3 id="使用win32DiskImager烧录"><a href="#使用win32DiskImager烧录" class="headerlink" title="使用win32DiskImager烧录"></a>使用win32DiskImager烧录</h3><ol><li>选择SD卡</li><li>选择下载好的镜像文件</li><li>点击“写入”</li><li>注意烧录完成后默认是不开启SSH，需要在SD卡根目录中（boot）新建SSH文件无后缀。</li></ol><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p>烧录好的TF卡被分为两个分区：一个FAT32的Boot分区，和一个（或数个）Ext4的Linux主分区。这也是Linux系统的典型需求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;8G以上Micro SD卡和读卡器，注意SD卡的读写速度直接影响系统的运行速度&lt;/p&gt;
&lt;h3 id=&quot;下载官网的最新系统&quot;</summary>
      
    
    
    
    <category term="树莓派" scheme="https://wicherqaq.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://wicherqaq.github.io/2020/05/22/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://wicherqaq.github.io/2020/05/22/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2020-05-22T14:37:10.000Z</published>
    <updated>2020-05-22T14:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>两两注意是相邻的两个元素的意思</li><li>如果有n个元素需要比较n-1次，每轮减少一次比较</li><li>既然叫冒泡排序，那就是从下玩往上两两比较，所以看上去就跟泡泡往上冒一样。</li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F;待排序数组</span><br><span class="line">int arr[] &#x3D;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int i,j,temp;</span><br><span class="line">bool changed;</span><br><span class="line">for(i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">changed &#x3D;flase;</span><br><span class="line">for(j&#x3D;0;j&lt;arr.length-i-1;j++)&#123;</span><br><span class="line">if(arr[j]&gt;arr[j+1])&#123;</span><br><span class="line">changed&#x3D;true;</span><br><span class="line">temp&#x3D;arr[j];</span><br><span class="line">arr[j]&#x3D;arr[j+1];</span><br><span class="line">arr[j+1]&#x3D;temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!changed)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;两两注意是相邻的两个元素的意思&lt;/li&gt;
&lt;li&gt;如果有n个元素需要比较n-1次，每轮减少一次比较&lt;/li&gt;
&lt;li&gt;既然叫冒泡</summary>
      
    
    
    
    <category term="排序算法" scheme="https://wicherqaq.github.io/categories/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode-242-有效的字母异位词</title>
    <link href="https://wicherqaq.github.io/2020/05/22/LeetCode-242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <id>https://wicherqaq.github.io/2020/05/22/LeetCode-242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</id>
    <published>2020-05-22T07:56:42.000Z</published>
    <updated>2020-05-22T07:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;rat&quot;, t &#x3D; &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>说明:<br>你可以假设字符串只包含小写字母。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isAnagram(string s, string t) &#123;</span><br><span class="line">        if(s.size()!&#x3D;t.size())</span><br><span class="line">            return false;</span><br><span class="line">        &#x2F;&#x2F;用来记录字符出现的次数</span><br><span class="line">        int count[26]&#x3D;&#123;0&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;s.size();i++)&#123;</span><br><span class="line">            count[s[i]-97]++;</span><br><span class="line">            count[t[i]-97]--;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;0;i&lt;26;i++)&#123;</span><br><span class="line">            if(count[i]!&#x3D;0)</span><br><span class="line">                return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="顺序存储" scheme="https://wicherqaq.github.io/tags/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>同步和异步</title>
    <link href="https://wicherqaq.github.io/2020/05/22/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/"/>
    <id>https://wicherqaq.github.io/2020/05/22/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/</id>
    <published>2020-05-21T23:38:51.000Z</published>
    <updated>2020-05-21T23:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>同步和异步关注的是<strong>消息通信机制</strong>，所谓同步就是在发出一个调用时，在没有得到结果之前，该调用就不能返回；但是一旦调用返回，就得到返回值了。</p><p>换句话说就是有调用者主动等待这个调用的结果。</p><p>而异步则是相反，“调用再发出之后”，这个调用就直接返回了，所有没有返回结果。换句话说当这个异步过程调用发生之后，调用者不会立刻获得结果。而是在调用发出之后，“被调用者“通过状态、通知来通知调用者，或者通过回调函数来处理这个调用。</p><p>典型的异步编程模型例如Node.js</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;同步和异步关注的是&lt;strong&gt;消息通信机制&lt;/strong&gt;，所谓同步就是在发出一个调用时，在没有得到结果之前，该调用就不能返回；但是一</summary>
      
    
    
    
    
    <category term="消息通信机制" scheme="https://wicherqaq.github.io/tags/%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
</feed>
